; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_bus.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_bus.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_bus.crf ..\..\User\bsp\src\bsp_spi_bus.c]
                          THUMB

                          AREA ||i.bsp_InitSPIBus||, CODE, READONLY, ALIGN=2

                  bsp_InitSPIBus PROC
;;;79     */
;;;80     void bsp_InitSPIBus(void)
000000  b508              PUSH     {r3,lr}
;;;81     {
;;;82     #ifdef SOFT_SPI		/* 软件SPI */
;;;83     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;84     
;;;85     	/* 打开GPIO时钟 */
;;;86     	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
;;;87     
;;;88     	/* 配置SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;89     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;90     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
;;;91     	GPIO_InitStructure.GPIO_Pin = PIN_SCK;
;;;92     	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
;;;93     
;;;94     	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;
;;;95     	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);	
;;;96     
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		/* MISO 设置为输入上拉 */
;;;98     	GPIO_InitStructure.GPIO_Pin = PIN_MISO;
;;;99     	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
;;;100    #endif
;;;101    
;;;102    #ifdef HARD_SPI		/* 硬件SPI */
;;;103    	GPIO_InitTypeDef GPIO_InitStructure;
;;;104    
;;;105    	/* 开启 SPI 时钟 */
;;;106    	//RCC_APB2PeriphClockCmd(RCC_SPI, ENABLE);
;;;107    	
;;;108    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000002  2101              MOVS     r1,#1
000004  0308              LSLS     r0,r1,#12
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;109    	
;;;110    	/* 使能 GPIO 时钟 */
;;;111    	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
00000a  2101              MOVS     r1,#1
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;112    
;;;113    	/* 配置 SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;114    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000012  2018              MOVS     r0,#0x18
000014  f88d0003          STRB     r0,[sp,#3]
;;;115    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;116    	GPIO_InitStructure.GPIO_Pin = PIN_SCK;	
00001e  2020              MOVS     r0,#0x20
000020  f8ad0000          STRH     r0,[sp,#0]
;;;117    	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4813              LDR      r0,|L1.116|
000028  f7fffffe          BL       GPIO_Init
;;;118    	
;;;119    	GPIO_InitStructure.GPIO_Pin = PIN_MISO;	
00002c  2040              MOVS     r0,#0x40
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;120    	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  480f              LDR      r0,|L1.116|
000036  f7fffffe          BL       GPIO_Init
;;;121    
;;;122    	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;	
00003a  2080              MOVS     r0,#0x80
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;123    	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  480c              LDR      r0,|L1.116|
000044  f7fffffe          BL       GPIO_Init
;;;124    		
;;;125    	bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
000048  f44f7041          MOV      r0,#0x304
00004c  f7fffffe          BL       bsp_SPI_Init
;;;126    		| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_2 | SPI_FirstBit_MSB);	
;;;127    	
;;;128    	/* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;129    	SPI_HARD->I2SCFGR &= SPI_Mode_Select;		/* 选择SPI模式，不是I2S模式 */
000050  4809              LDR      r0,|L1.120|
000052  8b80              LDRH     r0,[r0,#0x1c]
000054  f24f71ff          MOV      r1,#0xf7ff
000058  4008              ANDS     r0,r0,r1
00005a  4907              LDR      r1,|L1.120|
00005c  8388              STRH     r0,[r1,#0x1c]
;;;130    
;;;131    	/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;132    	/* Write to SPIx CRCPOLY */
;;;133    	SPI_HARD->CRCPR = 7;		/* 一般不用 */
00005e  2007              MOVS     r0,#7
000060  8208              STRH     r0,[r1,#0x10]
;;;134    
;;;135    
;;;136    	SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */
000062  2100              MOVS     r1,#0
000064  4804              LDR      r0,|L1.120|
000066  f7fffffe          BL       SPI_Cmd
;;;137    
;;;138    	SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */
00006a  2101              MOVS     r1,#1
00006c  4802              LDR      r0,|L1.120|
00006e  f7fffffe          BL       SPI_Cmd
;;;139    #endif
;;;140    }
000072  bd08              POP      {r3,pc}
;;;141    
                          ENDP

                  |L1.116|
                          DCD      0x40010800
                  |L1.120|
                          DCD      0x40013000

                          AREA ||i.bsp_SPI_Init||, CODE, READONLY, ALIGN=2

                  bsp_SPI_Init PROC
;;;150    #ifdef HARD_SPI		/* 硬件SPI */
;;;151    void bsp_SPI_Init(uint16_t _cr1)
000000  4909              LDR      r1,|L2.40|
;;;152    {
;;;153    	SPI_HARD->CR1 = ((SPI_HARD->CR1 & CR1_CLEAR_Mask) | _cr1);
000002  8809              LDRH     r1,[r1,#0]
000004  f4015141          AND      r1,r1,#0x3040
000008  4301              ORRS     r1,r1,r0
00000a  4a07              LDR      r2,|L2.40|
00000c  8011              STRH     r1,[r2,#0]
;;;154    	  
;;;155    	//SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */	    
;;;156        SPI_HARD->CR1 &= CR1_SPE_Reset;	/* Disable the selected SPI peripheral */
00000e  4611              MOV      r1,r2
000010  8809              LDRH     r1,[r1,#0]
000012  f64f72bf          MOV      r2,#0xffbf
000016  4011              ANDS     r1,r1,r2
000018  4a03              LDR      r2,|L2.40|
00001a  8011              STRH     r1,[r2,#0]
;;;157    
;;;158    	//SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */		    
;;;159        SPI_HARD->CR1 |= CR1_SPE_Set;	  /* Enable the selected SPI peripheral */
00001c  4611              MOV      r1,r2
00001e  8809              LDRH     r1,[r1,#0]
000020  f0410140          ORR      r1,r1,#0x40
000024  8011              STRH     r1,[r2,#0]
;;;160    }
000026  4770              BX       lr
;;;161    #endif
                          ENDP

                  |L2.40|
                          DCD      0x40013000

                          AREA ||i.bsp_SpiBusBusy||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusBusy PROC
;;;405    */
;;;406    uint8_t bsp_SpiBusBusy(void)
000000  4801              LDR      r0,|L3.8|
;;;407    {
;;;408    	return g_spi_busy;
000002  7800              LDRB     r0,[r0,#0]  ; g_spi_busy
;;;409    }
000004  4770              BX       lr
;;;410    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusEnter||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusEnter PROC
;;;379    */
;;;380    void bsp_SpiBusEnter(void)
000000  2001              MOVS     r0,#1
;;;381    {
;;;382    	g_spi_busy = 1;
000002  4901              LDR      r1,|L4.8|
000004  7008              STRB     r0,[r1,#0]
;;;383    }
000006  4770              BX       lr
;;;384    
                          ENDP

                  |L4.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusExit||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusExit PROC
;;;392    */
;;;393    void bsp_SpiBusExit(void)
000000  2000              MOVS     r0,#0
;;;394    {
;;;395    	g_spi_busy = 0;
000002  4901              LDR      r1,|L5.8|
000004  7008              STRB     r0,[r1,#0]
;;;396    }
000006  4770              BX       lr
;;;397    
                          ENDP

                  |L5.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_spiRead0||, CODE, READONLY, ALIGN=2

                  bsp_spiRead0 PROC
;;;234    */
;;;235    uint8_t bsp_spiRead0(void)
000000  b510              PUSH     {r4,lr}
;;;236    {
;;;237    #ifdef SOFT_SPI		/* 软件SPI */
;;;238    	uint8_t i;
;;;239    	uint8_t read = 0;
;;;240    
;;;241    	for (i = 0; i < 8; i++)
;;;242    	{
;;;243    		read = read<<1;
;;;244    
;;;245    		if (MISO_IS_HIGH())
;;;246    		{
;;;247    			read++;
;;;248    		}
;;;249    		SCK_1();
;;;250    		bsp_spiDelay();
;;;251    		SCK_0();
;;;252    		bsp_spiDelay();
;;;253    	}
;;;254    	return read;
;;;255    #endif
;;;256    
;;;257    #ifdef HARD_SPI		/* 硬件SPI */
;;;258    	uint8_t read;
;;;259    
;;;260    	/* 等待发送缓冲区空 */
;;;261    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L6.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L6.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L6.4|
;;;262    
;;;263    	/* 发送一个字节 */
;;;264    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L6.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;265    
;;;266    	/* 等待数据接收完毕 */
;;;267    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L6.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L6.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L6.26|
;;;268    
;;;269    	/* 读取接收到的数据 */
;;;270    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L6.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;271    
;;;272    	/* 返回读到的数据 */
;;;273    	return read;
00002e  4620              MOV      r0,r4
;;;274    #endif
;;;275    }
000030  bd10              POP      {r4,pc}
;;;276    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiRead1||, CODE, READONLY, ALIGN=2

                  bsp_spiRead1 PROC
;;;330    */
;;;331    uint8_t bsp_spiRead1(void)
000000  b510              PUSH     {r4,lr}
;;;332    {
;;;333    #ifdef SOFT_SPI		/* 软件SPI */
;;;334    	uint8_t i;
;;;335    	uint8_t read = 0;
;;;336    
;;;337    	for (i = 0; i < 8; i++)
;;;338    	{
;;;339    		SCK_0();
;;;340    		bsp_spiDelay();
;;;341    		read = read << 1;
;;;342    		if (MISO_IS_HIGH())
;;;343    		{
;;;344    			read++;
;;;345    		}
;;;346    		SCK_1();
;;;347    		bsp_spiDelay();
;;;348    	}
;;;349    	return read;
;;;350    #endif
;;;351    
;;;352    #ifdef HARD_SPI		/* 硬件SPI */
;;;353    	uint8_t read;
;;;354    
;;;355    	/* 等待发送缓冲区空 */
;;;356    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L7.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L7.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L7.4|
;;;357    
;;;358    	/* 发送一个字节 */
;;;359    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L7.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;360    
;;;361    	/* 等待数据接收完毕 */
;;;362    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L7.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L7.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L7.26|
;;;363    
;;;364    	/* 读取接收到的数据 */
;;;365    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L7.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;366    
;;;367    	/* 返回读到的数据 */
;;;368    	return read;
00002e  4620              MOV      r0,r4
;;;369    #endif
;;;370    }
000030  bd10              POP      {r4,pc}
;;;371    
                          ENDP

000032  0000              DCW      0x0000
                  |L7.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite0||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite0 PROC
;;;187    */
;;;188    void bsp_spiWrite0(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;189    {
000002  4604              MOV      r4,r0
;;;190    #ifdef SOFT_SPI		/* 软件SPI */
;;;191    	uint8_t i;
;;;192    
;;;193    	for(i = 0; i < 8; i++)
;;;194    	{
;;;195    		if (_ucByte & 0x80)
;;;196    		{
;;;197    			MOSI_1();
;;;198    		}
;;;199    		else
;;;200    		{
;;;201    			MOSI_0();
;;;202    		}
;;;203    		bsp_spiDelay();
;;;204    		SCK_1();
;;;205    		_ucByte <<= 1;
;;;206    		bsp_spiDelay();
;;;207    		SCK_0();
;;;208    	}
;;;209    	bsp_spiDelay();
;;;210    #endif
;;;211    
;;;212    #ifdef HARD_SPI		/* 硬件SPI */
;;;213    	/* 等待发送缓冲区空 */
;;;214    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L8.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L8.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L8.6|
;;;215    
;;;216    	/* 发送一个字节 */
;;;217    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L8.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;218    
;;;219    	/* 等待数据接收完毕 */
;;;220    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L8.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L8.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L8.28|
;;;221    
;;;222    	/* 读取接收到的数据 */
;;;223    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L8.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;224    #endif
;;;225    }
00002e  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  |L8.48|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite1||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite1 PROC
;;;284    */
;;;285    void bsp_spiWrite1(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287    #ifdef SOFT_SPI		/* 软件SPI */
;;;288    	uint8_t i;
;;;289    
;;;290    	for(i = 0; i < 8; i++)
;;;291    	{
;;;292    		if (_ucByte & 0x80)
;;;293    		{
;;;294    			MOSI_1();
;;;295    		}
;;;296    		else
;;;297    		{
;;;298    			MOSI_0();
;;;299    		}
;;;300    		SCK_0();
;;;301    		_ucByte <<= 1;
;;;302    		bsp_spiDelay();
;;;303    		SCK_1();				/* SCK上升沿采集数据, SCK空闲时为高电平 */
;;;304    		bsp_spiDelay();
;;;305    	}
;;;306    #endif
;;;307    
;;;308    #ifdef HARD_SPI		/* 硬件SPI */
;;;309    	/* 等待发送缓冲区空 */
;;;310    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L9.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L9.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;311    
;;;312    	/* 发送一个字节 */
;;;313    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L9.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;314    
;;;315    	/* 等待数据接收完毕 */
;;;316    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L9.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L9.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L9.28|
;;;317    
;;;318    	/* 读取接收到的数据 */
;;;319    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L9.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;320    #endif
;;;321    }
00002e  bd10              POP      {r4,pc}
;;;322    
                          ENDP

                  |L9.48|
                          DCD      0x40013000

                          AREA ||.data||, DATA, ALIGN=0

                  g_spi_busy
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_bus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_spi_bus_c_c88bcf96____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REVSH|
#line 128
|__asm___13_bsp_spi_bus_c_c88bcf96____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
