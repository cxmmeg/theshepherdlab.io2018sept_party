; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tft.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tft.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_tft.crf ..\..\User\bsp\src\bsp_tft.c]
                          THUMB

                          AREA ||i.LCD_BGR2RGB||, CODE, READONLY, ALIGN=1

                  LCD_BGR2RGB PROC
;;;333    //返回值：RGB格式的颜色值
;;;334    u16 LCD_BGR2RGB(u16 c)
000000  b530              PUSH     {r4,r5,lr}
;;;335    {
000002  4601              MOV      r1,r0
;;;336    	u16  r,g,b,rgb;   
;;;337    	b=(c>>0)&0x1f;
000004  f001041f          AND      r4,r1,#0x1f
;;;338    	g=(c>>5)&0x3f;
000008  f3c11345          UBFX     r3,r1,#5,#6
;;;339    	r=(c>>11)&0x1f;	 
00000c  0aca              LSRS     r2,r1,#11
;;;340    	rgb=(b<<11)+(g<<5)+(r<<0);		 
00000e  02e5              LSLS     r5,r4,#11
000010  eb051543          ADD      r5,r5,r3,LSL #5
000014  4415              ADD      r5,r5,r2
000016  b2a8              UXTH     r0,r5
;;;341    	return(rgb);
;;;342    } 
000018  bd30              POP      {r4,r5,pc}
;;;343    
                          ENDP


                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=2

                  LCD_Clear PROC
;;;926    //******************************************************************
;;;927    void LCD_Clear(u16 color)
000000  b570              PUSH     {r4-r6,lr}
;;;928    {
000002  4606              MOV      r6,r0
;;;929    	u16 i, j;
;;;930    	lcd_set_window(0, 0, lcddev.max_width - 1, lcddev.max_height - 1);
000004  4810              LDR      r0,|L2.72|
000006  8940              LDRH     r0,[r0,#0xa]  ; lcddev
000008  1e40              SUBS     r0,r0,#1
00000a  b283              UXTH     r3,r0
00000c  480e              LDR      r0,|L2.72|
00000e  8900              LDRH     r0,[r0,#8]  ; lcddev
000010  1e40              SUBS     r0,r0,#1
000012  b282              UXTH     r2,r0
000014  2100              MOVS     r1,#0
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       lcd_set_window
;;;931    	for (i = lcddev.base_height; i < lcddev.max_height; i++)
00001c  480a              LDR      r0,|L2.72|
00001e  88c4              LDRH     r4,[r0,#6]  ; lcddev
000020  e00d              B        |L2.62|
                  |L2.34|
;;;932    	{
;;;933    		for (j = lcddev.base_width; j < lcddev.max_width; j++)
000022  4809              LDR      r0,|L2.72|
000024  8885              LDRH     r5,[r0,#4]  ; lcddev
000026  e004              B        |L2.50|
                  |L2.40|
;;;934    			LCD_WR_16Bit(color);	//写入数据 	
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       LCD_WR_16Bit
00002e  1c68              ADDS     r0,r5,#1              ;933
000030  b285              UXTH     r5,r0                 ;933
                  |L2.50|
000032  4805              LDR      r0,|L2.72|
000034  8900              LDRH     r0,[r0,#8]            ;933  ; lcddev
000036  42a8              CMP      r0,r5                 ;933
000038  dcf6              BGT      |L2.40|
00003a  1c60              ADDS     r0,r4,#1              ;931
00003c  b284              UXTH     r4,r0                 ;931
                  |L2.62|
00003e  4802              LDR      r0,|L2.72|
000040  8940              LDRH     r0,[r0,#0xa]          ;931  ; lcddev
000042  42a0              CMP      r0,r4                 ;931
000044  dced              BGT      |L2.34|
;;;935    	}
;;;936    }
000046  bd70              POP      {r4-r6,pc}
;;;937    
                          ENDP

                  |L2.72|
                          DCD      lcddev

                          AREA ||i.LCD_Clear_Sel||, CODE, READONLY, ALIGN=1

                  LCD_Clear_Sel PROC
;;;938    /*清屏，x为列号0-X_MAX_PIXEL-1，x_total为清的列数，y为行号0-Y_MARK-1，y_total为清的行数，mode=0为清白屏，mode=1为清黑屏*/
;;;939    void LCD_Clear_Sel(u16 x, u16 y, u16 w, u16 h, u16 color)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;940    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;941    	u8 i, j;
;;;942    
;;;943    	for (i = 0; i < h; i++)
000010  2700              MOVS     r7,#0
000012  e017              B        |L3.68|
                  |L3.20|
;;;944    	{
;;;945    		lcd_set_window(x, y + i, x + w, y + h);
000014  19a0              ADDS     r0,r4,r6
000016  b283              UXTH     r3,r0
000018  eb080005          ADD      r0,r8,r5
00001c  b282              UXTH     r2,r0
00001e  19e0              ADDS     r0,r4,r7
000020  b281              UXTH     r1,r0
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       lcd_set_window
;;;946    		for (j = 0; j < w; j++)
000028  f04f0900          MOV      r9,#0
00002c  e006              B        |L3.60|
                  |L3.46|
;;;947    		{
;;;948    			LCD_WR_16Bit(color);	//写入数据 	
00002e  4650              MOV      r0,r10
000030  f7fffffe          BL       LCD_WR_16Bit
000034  f1090001          ADD      r0,r9,#1              ;946
000038  f00009ff          AND      r9,r0,#0xff           ;946
                  |L3.60|
00003c  45a9              CMP      r9,r5                 ;946
00003e  dbf6              BLT      |L3.46|
000040  1c78              ADDS     r0,r7,#1              ;943
000042  b2c7              UXTB     r7,r0                 ;943
                  |L3.68|
000044  42b7              CMP      r7,r6                 ;943
000046  dbe5              BLT      |L3.20|
;;;949    		}
;;;950    	}
;;;951    }
000048  e8bd87f0          POP      {r4-r10,pc}
;;;952    
                          ENDP


                          AREA ||i.LCD_Color_Fill||, CODE, READONLY, ALIGN=1

                  LCD_Color_Fill PROC
;;;972    //color:要填充的颜色
;;;973    void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;974    {  
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;975    	u16 height,width;
;;;976    	u16 i,j;
;;;977    	width=ex-sx+1; 			//得到填充的宽度
000010  eba80007          SUB      r0,r8,r7
000014  1c40              ADDS     r0,r0,#1
000016  fa1ffa80          UXTH     r10,r0
;;;978    	height=ey-sy+1;			//高度
00001a  eba90005          SUB      r0,r9,r5
00001e  1c40              ADDS     r0,r0,#1
000020  b280              UXTH     r0,r0
000022  9000              STR      r0,[sp,#0]
;;;979     	for(i=0;i<height;i++)
000024  2400              MOVS     r4,#0
000026  e012              B        |L4.78|
                  |L4.40|
;;;980    	{
;;;981     		lcd_cursor(sx,sy+i);   	//设置光标位置 
000028  1928              ADDS     r0,r5,r4
00002a  b281              UXTH     r1,r0
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       lcd_cursor
;;;982    		for(j=0;j<width;j++)
000032  2600              MOVS     r6,#0
000034  e007              B        |L4.70|
                  |L4.54|
;;;983    			LCD_WR_16Bit(color[i*width+j]);//写入数据 
000036  fb04610a          MLA      r1,r4,r10,r6
00003a  f83b0011          LDRH     r0,[r11,r1,LSL #1]
00003e  f7fffffe          BL       LCD_WR_16Bit
000042  1c70              ADDS     r0,r6,#1              ;982
000044  b286              UXTH     r6,r0                 ;982
                  |L4.70|
000046  4556              CMP      r6,r10                ;982
000048  dbf5              BLT      |L4.54|
00004a  1c60              ADDS     r0,r4,#1              ;979
00004c  b284              UXTH     r4,r0                 ;979
                  |L4.78|
00004e  9800              LDR      r0,[sp,#0]            ;979
000050  4284              CMP      r4,r0                 ;979
000052  dbe9              BLT      |L4.40|
;;;984    	}		  
;;;985    }  
000054  e8bd8ff8          POP      {r3-r11,pc}
;;;986    
                          ENDP


                          AREA ||i.LCD_Display||, CODE, READONLY, ALIGN=1

                  LCD_Display PROC
;;;1181   //开启、关闭LCD显示
;;;1182   void LCD_Display(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;1183   {
000002  4604              MOV      r4,r0
;;;1184   	if (mode)
000004  b13c              CBZ      r4,|L5.22|
;;;1185   	{
;;;1186   		LCD_WR(LCD_CMD, 0x29);//Display on
000006  2129              MOVS     r1,#0x29
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LCD_WR
;;;1187   		LCD_Light_Set(10);	//点亮背光
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       LCD_Light_Set
000014  e006              B        |L5.36|
                  |L5.22|
;;;1188   	}
;;;1189   	else
;;;1190   	{
;;;1191   		LCD_WR(LCD_CMD, 0x28);//Display off
000016  2128              MOVS     r1,#0x28
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       LCD_WR
;;;1192   		LCD_Light_Set(0);	//点亮背光
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       LCD_Light_Set
                  |L5.36|
;;;1193   	}
;;;1194   }
000024  bd10              POP      {r4,pc}
;;;1195   
                          ENDP


                          AREA ||i.LCD_DrawBitmap||, CODE, READONLY, ALIGN=1

                  LCD_DrawBitmap PROC
;;;1148   //画图
;;;1149   void LCD_DrawBitmap(u16 x0, u16 y0, const unsigned char  *bitmap, u16 w, u16 h, u16 color, u16 bg)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1150   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  461e              MOV      r6,r3
00000a  e9ddab0b          LDRD     r10,r11,[sp,#0x2c]
00000e  f8dd8028          LDR      r8,[sp,#0x28]
;;;1151   	//int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
;;;1152   	//uint8_t byte = 0;
;;;1153   
;;;1154   	//for (int16_t j = 0; j < h; j++, y0++) 
;;;1155   	//{
;;;1156   	//	for (int16_t i = 0; i < w; i++) 
;;;1157   	//	{
;;;1158   	//		if (i & 7) byte <<= 1;
;;;1159   	//		else      byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
;;;1160   	//		if (byte & 0x80) LCD_DrawPixel(x0 + i, y0, color);
;;;1161   	//	}
;;;1162   	//}
;;;1163   	uint16_t i,j;
;;;1164   	LCD_Clear(BLACK);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       LCD_Clear
;;;1165   	lcd_set_window(x0, y0, x0 + w - 1, y0 + h - 1);
000018  eb050008          ADD      r0,r5,r8
00001c  1e40              SUBS     r0,r0,#1
00001e  b283              UXTH     r3,r0
000020  19a0              ADDS     r0,r4,r6
000022  1e40              SUBS     r0,r0,#1
000024  b282              UXTH     r2,r0
000026  4629              MOV      r1,r5
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       lcd_set_window
;;;1166   	//lcd_cursor(x0, y0);
;;;1167   	
;;;1168   	for (i = y0; i < w; i++)
00002e  462f              MOV      r7,r5
000030  e00d              B        |L6.78|
                  |L6.50|
;;;1169   	{
;;;1170   		lcd_cursor(x0, i);
000032  4639              MOV      r1,r7
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       lcd_cursor
;;;1171   		for (j = x0; j < h; j++)
00003a  46a1              MOV      r9,r4
00003c  e003              B        |L6.70|
                  |L6.62|
00003e  f1090001          ADD      r0,r9,#1
000042  fa1ff980          UXTH     r9,r0
                  |L6.70|
000046  45c1              CMP      r9,r8
000048  dbf9              BLT      |L6.62|
00004a  1c78              ADDS     r0,r7,#1              ;1168
00004c  b287              UXTH     r7,r0                 ;1168
                  |L6.78|
00004e  42b7              CMP      r7,r6                 ;1168
000050  dbef              BLT      |L6.50|
;;;1172   		{
;;;1173   			//LCD_WR_16Bit()
;;;1174   			//OLED_WR_Byte(BMP[j++], OLED_DATA);
;;;1175   		}
;;;1176   	}
;;;1177   
;;;1178   
;;;1179   }
000052  e8bd9ff0          POP      {r4-r12,pc}
;;;1180   
                          ENDP


                          AREA ||i.LCD_DrawBox||, CODE, READONLY, ALIGN=1

                  LCD_DrawBox PROC
;;;1122   //(x1,y1,w,h):矩形点坐标、宽、长
;;;1123   void LCD_DrawBox(u16 x1, u16 y1, u16 w, u16 h, u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1124   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1125   	LCD_Fill(x1,y1,x1+w-1,y1+h-1, color);
000010  19e8              ADDS     r0,r5,r7
000012  1e40              SUBS     r0,r0,#1
000014  b283              UXTH     r3,r0
000016  19a0              ADDS     r0,r4,r6
000018  1e40              SUBS     r0,r0,#1
00001a  b282              UXTH     r2,r0
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f8cd8000          STR      r8,[sp,#0]
000024  f7fffffe          BL       LCD_Fill
;;;1126   }
000028  e8bd83f8          POP      {r3-r9,pc}
;;;1127   
                          ENDP


                          AREA ||i.LCD_DrawChar||, CODE, READONLY, ALIGN=2

                  LCD_DrawChar PROC
;;;1572   // draw a character
;;;1573   void LCD_DrawChar(u16 x, u16 y, unsigned char c, u16 color, u16 bg, u8 size)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;1574   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4693              MOV      r11,r2
00000a  4699              MOV      r9,r3
00000c  e9dda40c          LDRD     r10,r4,[sp,#0x30]
;;;1575   	u8 i, j, line;
;;;1576   
;;;1577   	if ((x >= lcddev.max_width) || // Clip right
000010  4835              LDR      r0,|L8.232|
000012  8900              LDRH     r0,[r0,#8]  ; lcddev
000014  42b0              CMP      r0,r6
000016  dd0f              BLE      |L8.56|
;;;1578   		(y >= lcddev.max_height) || // Clip bottom
000018  4833              LDR      r0,|L8.232|
00001a  8940              LDRH     r0,[r0,#0xa]  ; lcddev
00001c  42b8              CMP      r0,r7
00001e  dd0b              BLE      |L8.56|
;;;1579   		((x + 6 * size - 1) < 0) || // Clip left
000020  2006              MOVS     r0,#6
000022  fb006004          MLA      r0,r0,r4,r6
000026  1e40              SUBS     r0,r0,#1
000028  2800              CMP      r0,#0
00002a  d405              BMI      |L8.56|
;;;1580   		((y + 8 * size - 1) < 0))     // Clip top
00002c  2008              MOVS     r0,#8
00002e  fb007004          MLA      r0,r0,r4,r7
000032  1e40              SUBS     r0,r0,#1
000034  2800              CMP      r0,#0
000036  d501              BPL      |L8.60|
                  |L8.56|
;;;1581   		return;
;;;1582   
;;;1583   	for (i = 0; i < 6; i++) 
;;;1584   	{
;;;1585   		if (i == 5)
;;;1586   			line = 0x0;
;;;1587   		else
;;;1588   			line = pgm_read_byte(font + (c * 5) + i);
;;;1589   		for (j = 0; j < 8; j++) {
;;;1590   			if (line & 0x1) {
;;;1591   				if (size == 1) // default size
;;;1592   					LCD_DrawPixel(x + i, y + j, color);
;;;1593   				else {  // big size
;;;1594   					LCD_DrawBox(x + (i*size), y + (j*size), size, size, color);
;;;1595   				}
;;;1596   			}
;;;1597   			else if (bg != color) {
;;;1598   				if (size == 1) // default size
;;;1599   					LCD_DrawPixel(x + i, y + j, bg);
;;;1600   				else {  // big size
;;;1601   					LCD_DrawBox(x + i * size, y + j * size, size, size, bg);
;;;1602   				}
;;;1603   			}
;;;1604   			line >>= 1;
;;;1605   		}
;;;1606   	}
;;;1607   }
000038  e8bd9ffc          POP      {r2-r12,pc}
                  |L8.60|
00003c  2500              MOVS     r5,#0                 ;1583
00003e  e04e              B        |L8.222|
                  |L8.64|
000040  2d05              CMP      r5,#5                 ;1585
000042  d102              BNE      |L8.74|
000044  2000              MOVS     r0,#0                 ;1586
000046  9001              STR      r0,[sp,#4]            ;1586
000048  e005              B        |L8.86|
                  |L8.74|
00004a  eb0b008b          ADD      r0,r11,r11,LSL #2     ;1588
00004e  4927              LDR      r1,|L8.236|
000050  4408              ADD      r0,r0,r1              ;1588
000052  5d40              LDRB     r0,[r0,r5]            ;1588
000054  9001              STR      r0,[sp,#4]            ;1588
                  |L8.86|
000056  f04f0800          MOV      r8,#0                 ;1589
00005a  e03b              B        |L8.212|
                  |L8.92|
00005c  9801              LDR      r0,[sp,#4]            ;1590
00005e  f0000001          AND      r0,r0,#1              ;1590
000062  b1b8              CBZ      r0,|L8.148|
000064  2c01              CMP      r4,#1                 ;1591
000066  d108              BNE      |L8.122|
000068  eb070208          ADD      r2,r7,r8              ;1592
00006c  b291              UXTH     r1,r2                 ;1592
00006e  1972              ADDS     r2,r6,r5              ;1592
000070  b290              UXTH     r0,r2                 ;1592
000072  464a              MOV      r2,r9                 ;1592
000074  f7fffffe          BL       LCD_DrawPixel
000078  e025              B        |L8.198|
                  |L8.122|
00007a  fb087204          MLA      r2,r8,r4,r7           ;1594
00007e  b291              UXTH     r1,r2                 ;1594
000080  fb056204          MLA      r2,r5,r4,r6           ;1594
000084  b290              UXTH     r0,r2                 ;1594
000086  4623              MOV      r3,r4                 ;1594
000088  4622              MOV      r2,r4                 ;1594
00008a  f8cd9000          STR      r9,[sp,#0]            ;1594
00008e  f7fffffe          BL       LCD_DrawBox
000092  e018              B        |L8.198|
                  |L8.148|
000094  45ca              CMP      r10,r9                ;1597
000096  d016              BEQ      |L8.198|
000098  2c01              CMP      r4,#1                 ;1598
00009a  d108              BNE      |L8.174|
00009c  eb070208          ADD      r2,r7,r8              ;1599
0000a0  b291              UXTH     r1,r2                 ;1599
0000a2  1972              ADDS     r2,r6,r5              ;1599
0000a4  b290              UXTH     r0,r2                 ;1599
0000a6  4652              MOV      r2,r10                ;1599
0000a8  f7fffffe          BL       LCD_DrawPixel
0000ac  e00b              B        |L8.198|
                  |L8.174|
0000ae  fb087204          MLA      r2,r8,r4,r7           ;1601
0000b2  b291              UXTH     r1,r2                 ;1601
0000b4  fb056204          MLA      r2,r5,r4,r6           ;1601
0000b8  b290              UXTH     r0,r2                 ;1601
0000ba  4623              MOV      r3,r4                 ;1601
0000bc  4622              MOV      r2,r4                 ;1601
0000be  f8cda000          STR      r10,[sp,#0]           ;1601
0000c2  f7fffffe          BL       LCD_DrawBox
                  |L8.198|
0000c6  9801              LDR      r0,[sp,#4]            ;1604
0000c8  1040              ASRS     r0,r0,#1              ;1604
0000ca  9001              STR      r0,[sp,#4]            ;1604
0000cc  f1080001          ADD      r0,r8,#1              ;1589
0000d0  f00008ff          AND      r8,r0,#0xff           ;1589
                  |L8.212|
0000d4  f1b80f08          CMP      r8,#8                 ;1589
0000d8  dbc0              BLT      |L8.92|
0000da  1c68              ADDS     r0,r5,#1              ;1583
0000dc  b2c5              UXTB     r5,r0                 ;1583
                  |L8.222|
0000de  2d06              CMP      r5,#6                 ;1583
0000e0  dbae              BLT      |L8.64|
0000e2  bf00              NOP      
0000e4  e7a8              B        |L8.56|
;;;1608   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L8.232|
                          DCD      lcddev
                  |L8.236|
                          DCD      font

                          AREA ||i.LCD_DrawCircle||, CODE, READONLY, ALIGN=1

                  LCD_DrawCircle PROC
;;;1059   //r    :半径
;;;1060   void LCD_DrawCircle(u16 x0, u16 y0, u8 r, u16 color)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1061   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  469a              MOV      r10,r3
;;;1062   	int a,b;
;;;1063   	int di;
;;;1064   	a=0;b=r;	  
00000c  2400              MOVS     r4,#0
00000e  4645              MOV      r5,r8
;;;1065   	di=3-(r<<1);             //判断下个点位置的标志
000010  2003              MOVS     r0,#3
000012  eba00948          SUB      r9,r0,r8,LSL #1
;;;1066   	while(a<=b)
000016  e044              B        |L9.162|
                  |L9.24|
;;;1067   	{
;;;1068   		LCD_DrawPixel(x0+a,y0-b, color);             //5
000018  1b7a              SUBS     r2,r7,r5
00001a  b291              UXTH     r1,r2
00001c  1932              ADDS     r2,r6,r4
00001e  b290              UXTH     r0,r2
000020  4652              MOV      r2,r10
000022  f7fffffe          BL       LCD_DrawPixel
;;;1069    		LCD_DrawPixel(x0+b,y0-a, color);             //0           
000026  1b3a              SUBS     r2,r7,r4
000028  b291              UXTH     r1,r2
00002a  1972              ADDS     r2,r6,r5
00002c  b290              UXTH     r0,r2
00002e  4652              MOV      r2,r10
000030  f7fffffe          BL       LCD_DrawPixel
;;;1070   		LCD_DrawPixel(x0+b,y0+a, color);             //4               
000034  193a              ADDS     r2,r7,r4
000036  b291              UXTH     r1,r2
000038  1972              ADDS     r2,r6,r5
00003a  b290              UXTH     r0,r2
00003c  4652              MOV      r2,r10
00003e  f7fffffe          BL       LCD_DrawPixel
;;;1071   		LCD_DrawPixel(x0+a,y0+b, color);             //6 
000042  197a              ADDS     r2,r7,r5
000044  b291              UXTH     r1,r2
000046  1932              ADDS     r2,r6,r4
000048  b290              UXTH     r0,r2
00004a  4652              MOV      r2,r10
00004c  f7fffffe          BL       LCD_DrawPixel
;;;1072   		LCD_DrawPixel(x0-a,y0+b, color);             //1       
000050  197a              ADDS     r2,r7,r5
000052  b291              UXTH     r1,r2
000054  1b32              SUBS     r2,r6,r4
000056  b290              UXTH     r0,r2
000058  4652              MOV      r2,r10
00005a  f7fffffe          BL       LCD_DrawPixel
;;;1073    		LCD_DrawPixel(x0-b,y0+a, color);             
00005e  193a              ADDS     r2,r7,r4
000060  b291              UXTH     r1,r2
000062  1b72              SUBS     r2,r6,r5
000064  b290              UXTH     r0,r2
000066  4652              MOV      r2,r10
000068  f7fffffe          BL       LCD_DrawPixel
;;;1074   		LCD_DrawPixel(x0-a,y0-b, color);             //2             
00006c  1b7a              SUBS     r2,r7,r5
00006e  b291              UXTH     r1,r2
000070  1b32              SUBS     r2,r6,r4
000072  b290              UXTH     r0,r2
000074  4652              MOV      r2,r10
000076  f7fffffe          BL       LCD_DrawPixel
;;;1075     		LCD_DrawPixel(x0-b,y0-a, color);             //7       	         
00007a  1b3a              SUBS     r2,r7,r4
00007c  b291              UXTH     r1,r2
00007e  1b72              SUBS     r2,r6,r5
000080  b290              UXTH     r0,r2
000082  4652              MOV      r2,r10
000084  f7fffffe          BL       LCD_DrawPixel
;;;1076   		a++;
000088  1c64              ADDS     r4,r4,#1
;;;1077   		//使用Bresenham算法画圆     
;;;1078   		if(di<0)di +=4*a+6;	  
00008a  f1b90f00          CMP      r9,#0
00008e  da03              BGE      |L9.152|
000090  00a0              LSLS     r0,r4,#2
000092  1d80              ADDS     r0,r0,#6
000094  4481              ADD      r9,r9,r0
000096  e004              B        |L9.162|
                  |L9.152|
;;;1079   		else
;;;1080   		{
;;;1081   			di+=10+4*(a-b);   
000098  1b60              SUBS     r0,r4,r5
00009a  0080              LSLS     r0,r0,#2
00009c  300a              ADDS     r0,r0,#0xa
00009e  4481              ADD      r9,r9,r0
;;;1082   			b--;
0000a0  1e6d              SUBS     r5,r5,#1
                  |L9.162|
0000a2  42ac              CMP      r4,r5                 ;1066
0000a4  ddb8              BLE      |L9.24|
;;;1083   		} 						    
;;;1084   	}
;;;1085   } 	
0000a6  e8bd87f0          POP      {r4-r10,pc}
;;;1086   
                          ENDP


                          AREA ||i.LCD_DrawFastHLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawFastHLine PROC
;;;1043   //w:长度
;;;1044   void LCD_DrawFastHLine(u16 x1, u16 y1, u16 w, u16 color)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1045   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;1046   	LCD_DrawLine(x1,y1,x1+w-1,y1,color);
00000a  19a0              ADDS     r0,r4,r6
00000c  1e40              SUBS     r0,r0,#1
00000e  b282              UXTH     r2,r0
000010  462b              MOV      r3,r5
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  9700              STR      r7,[sp,#0]
000018  f7fffffe          BL       LCD_DrawLine
;;;1047   }
00001c  bdf8              POP      {r3-r7,pc}
;;;1048   
                          ENDP


                          AREA ||i.LCD_DrawFastVLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawFastVLine PROC
;;;1051   //w:高度
;;;1052   void LCD_DrawFastVLine(u16 x1, u16 y1, u16 h, u16 color)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1053   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;1054   	LCD_DrawLine(x1,y1,x1,y1+h-1,color);
00000a  19a8              ADDS     r0,r5,r6
00000c  1e40              SUBS     r0,r0,#1
00000e  b283              UXTH     r3,r0
000010  4622              MOV      r2,r4
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  9700              STR      r7,[sp,#0]
000018  f7fffffe          BL       LCD_DrawLine
;;;1055   }
00001c  bdf8              POP      {r3-r7,pc}
;;;1056   
                          ENDP


                          AREA ||i.LCD_DrawFrame||, CODE, READONLY, ALIGN=1

                  LCD_DrawFrame PROC
;;;1112   //(x1,y1,w,h):矩形点坐标、宽、长
;;;1113   void LCD_DrawFrame(u16 x1, u16 y1, u16 w, u16 h, u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1114   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1115   	LCD_DrawLine(x1,y1,x1+w-1,y1, color);
000010  19a0              ADDS     r0,r4,r6
000012  1e40              SUBS     r0,r0,#1
000014  b282              UXTH     r2,r0
000016  462b              MOV      r3,r5
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f8cd8000          STR      r8,[sp,#0]
000020  f7fffffe          BL       LCD_DrawLine
;;;1116   	LCD_DrawLine(x1,y1,x1,y1+h-1, color);
000024  19e8              ADDS     r0,r5,r7
000026  1e40              SUBS     r0,r0,#1
000028  b283              UXTH     r3,r0
00002a  4622              MOV      r2,r4
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f8cd8000          STR      r8,[sp,#0]
000034  f7fffffe          BL       LCD_DrawLine
;;;1117   	LCD_DrawLine(x1,y1+h-1,x1+w-1,y1+h-1, color);
000038  19e8              ADDS     r0,r5,r7
00003a  1e40              SUBS     r0,r0,#1
00003c  b283              UXTH     r3,r0
00003e  19a0              ADDS     r0,r4,r6
000040  1e40              SUBS     r0,r0,#1
000042  b282              UXTH     r2,r0
000044  19e8              ADDS     r0,r5,r7
000046  1e40              SUBS     r0,r0,#1
000048  b281              UXTH     r1,r0
00004a  4620              MOV      r0,r4
00004c  f8cd8000          STR      r8,[sp,#0]
000050  f7fffffe          BL       LCD_DrawLine
;;;1118   	LCD_DrawLine(x1+w-1,y1,x1+w-1,y1+h-1, color);
000054  19e9              ADDS     r1,r5,r7
000056  1e49              SUBS     r1,r1,#1
000058  b28b              UXTH     r3,r1
00005a  19a1              ADDS     r1,r4,r6
00005c  1e49              SUBS     r1,r1,#1
00005e  b28a              UXTH     r2,r1
000060  19a1              ADDS     r1,r4,r6
000062  1e49              SUBS     r1,r1,#1
000064  b288              UXTH     r0,r1
000066  4629              MOV      r1,r5
000068  f8cd8000          STR      r8,[sp,#0]
00006c  f7fffffe          BL       LCD_DrawLine
;;;1119   }
000070  e8bd83f8          POP      {r3-r9,pc}
;;;1120   
                          ENDP


                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawLine PROC
;;;1005   //x2,y2:终点坐标  
;;;1006   void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1007   {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
;;;1008   	u16 t; 
;;;1009   	int xerr=0,yerr=0,delta_x,delta_y,distance; 
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  4683              MOV      r11,r0
;;;1010   	int incx,incy,uRow,uCol; 
;;;1011   	delta_x=x2-x1; //计算坐标增量 
000010  9807              LDR      r0,[sp,#0x1c]
000012  eba00509          SUB      r5,r0,r9
;;;1012   	delta_y=y2-y1; 
000016  9808              LDR      r0,[sp,#0x20]
000018  eba0060a          SUB      r6,r0,r10
;;;1013   	uRow=x1; 
00001c  f8cd9008          STR      r9,[sp,#8]
;;;1014   	uCol=y1; 
000020  f8cda004          STR      r10,[sp,#4]
;;;1015   	if(delta_x>0)incx=1; //设置单步方向 
000024  2d00              CMP      r5,#0
000026  dd01              BLE      |L13.44|
000028  2701              MOVS     r7,#1
00002a  e005              B        |L13.56|
                  |L13.44|
;;;1016   	else if(delta_x==0)incx=0;//垂直线 
00002c  b90d              CBNZ     r5,|L13.50|
00002e  2700              MOVS     r7,#0
000030  e002              B        |L13.56|
                  |L13.50|
;;;1017   	else {incx=-1;delta_x=-delta_x;} 
000032  f04f37ff          MOV      r7,#0xffffffff
000036  426d              RSBS     r5,r5,#0
                  |L13.56|
;;;1018   	if(delta_y>0)incy=1; 
000038  2e00              CMP      r6,#0
00003a  dd02              BLE      |L13.66|
00003c  f04f0801          MOV      r8,#1
000040  e006              B        |L13.80|
                  |L13.66|
;;;1019   	else if(delta_y==0)incy=0;//水平线 
000042  b916              CBNZ     r6,|L13.74|
000044  f04f0800          MOV      r8,#0
000048  e002              B        |L13.80|
                  |L13.74|
;;;1020   	else{incy=-1;delta_y=-delta_y;} 
00004a  f04f38ff          MOV      r8,#0xffffffff
00004e  4276              RSBS     r6,r6,#0
                  |L13.80|
;;;1021   	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
000050  42b5              CMP      r5,r6
000052  dd01              BLE      |L13.88|
000054  462c              MOV      r4,r5
000056  e000              B        |L13.90|
                  |L13.88|
;;;1022   	else distance=delta_y; 
000058  4634              MOV      r4,r6
                  |L13.90|
;;;1023   	for(t=0;t<=distance+1;t++ )//画线输出 
00005a  2000              MOVS     r0,#0
00005c  9004              STR      r0,[sp,#0x10]
00005e  e01e              B        |L13.158|
                  |L13.96|
;;;1024   	{  
;;;1025   		LCD_DrawPixel(uRow, uCol, color);//画点 
000060  9a01              LDR      r2,[sp,#4]
000062  b291              UXTH     r1,r2
000064  9a02              LDR      r2,[sp,#8]
000066  b290              UXTH     r0,r2
000068  9a12              LDR      r2,[sp,#0x48]
00006a  f7fffffe          BL       LCD_DrawPixel
;;;1026   		xerr+=delta_x ; 
00006e  9803              LDR      r0,[sp,#0xc]
000070  4428              ADD      r0,r0,r5
000072  9003              STR      r0,[sp,#0xc]
;;;1027   		yerr+=delta_y ; 
000074  44b3              ADD      r11,r11,r6
;;;1028   		if(xerr>distance) 
000076  9803              LDR      r0,[sp,#0xc]
000078  42a0              CMP      r0,r4
00007a  dd05              BLE      |L13.136|
;;;1029   		{ 
;;;1030   			xerr-=distance; 
00007c  9803              LDR      r0,[sp,#0xc]
00007e  1b00              SUBS     r0,r0,r4
000080  9003              STR      r0,[sp,#0xc]
;;;1031   			uRow+=incx; 
000082  9802              LDR      r0,[sp,#8]
000084  4438              ADD      r0,r0,r7
000086  9002              STR      r0,[sp,#8]
                  |L13.136|
;;;1032   		} 
;;;1033   		if(yerr>distance) 
000088  45a3              CMP      r11,r4
00008a  dd04              BLE      |L13.150|
;;;1034   		{ 
;;;1035   			yerr-=distance; 
00008c  ebab0b04          SUB      r11,r11,r4
;;;1036   			uCol+=incy; 
000090  9801              LDR      r0,[sp,#4]
000092  4440              ADD      r0,r0,r8
000094  9001              STR      r0,[sp,#4]
                  |L13.150|
000096  9804              LDR      r0,[sp,#0x10]         ;1023
000098  1c40              ADDS     r0,r0,#1              ;1023
00009a  b280              UXTH     r0,r0                 ;1023
00009c  9004              STR      r0,[sp,#0x10]         ;1023
                  |L13.158|
00009e  1c61              ADDS     r1,r4,#1              ;1023
0000a0  9804              LDR      r0,[sp,#0x10]         ;1023
0000a2  4288              CMP      r0,r1                 ;1023
0000a4  dddc              BLE      |L13.96|
;;;1037   		} 
;;;1038   	}  
;;;1039   } 
0000a6  b009              ADD      sp,sp,#0x24
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;1040   
                          ENDP


                          AREA ||i.LCD_DrawPixel||, CODE, READONLY, ALIGN=1

                  LCD_DrawPixel PROC
;;;996    //******************************************************************
;;;997    void LCD_DrawPixel(u16 x, u16 y, u16 color)
000000  b570              PUSH     {r4-r6,lr}
;;;998    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;999    	lcd_cursor(x, y);//设置光标位置 
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       lcd_cursor
;;;1000   	LCD_WR_16Bit(color);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       LCD_WR_16Bit
;;;1001   }
000016  bd70              POP      {r4-r6,pc}
;;;1002   
                          ENDP


                          AREA ||i.LCD_DrawRect||, CODE, READONLY, ALIGN=1

                  LCD_DrawRect PROC
;;;1095   //(x1,y1),(x2,y2):矩形的对角坐标
;;;1096   void LCD_DrawRect(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1097   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;1098   	LCD_DrawLine(x1,y1,x2,y1, color);
00000e  4633              MOV      r3,r6
000010  463a              MOV      r2,r7
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  9400              STR      r4,[sp,#0]
000018  f7fffffe          BL       LCD_DrawLine
;;;1099   	LCD_DrawLine(x1,y1,x1,y2, color);
00001c  4643              MOV      r3,r8
00001e  462a              MOV      r2,r5
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       LCD_DrawLine
;;;1100   	LCD_DrawLine(x1,y2,x2,y2, color);
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4641              MOV      r1,r8
000030  4628              MOV      r0,r5
000032  9400              STR      r4,[sp,#0]
000034  f7fffffe          BL       LCD_DrawLine
;;;1101   	LCD_DrawLine(x2,y1,x2,y2, color);
000038  4643              MOV      r3,r8
00003a  463a              MOV      r2,r7
00003c  4631              MOV      r1,r6
00003e  4638              MOV      r0,r7
000040  9400              STR      r4,[sp,#0]
000042  f7fffffe          BL       LCD_DrawLine
;;;1102   }
000046  e8bd83f8          POP      {r3-r9,pc}
;;;1103   
                          ENDP


                          AREA ||i.LCD_DrawRoundRect||, CODE, READONLY, ALIGN=1

                  LCD_DrawRoundRect PROC
;;;1131   //(x1,y1),(x2,y2):矩形的对角坐标
;;;1132   void LCD_DrawRoundRect(u16 x1, u16 y1, u16 x2, u16 y2, u16 r, u16 color)
000000  b530              PUSH     {r4,r5,lr}
;;;1133   {
000002  e9dd4503          LDRD     r4,r5,[sp,#0xc]
;;;1134   }
000006  bd30              POP      {r4,r5,pc}
;;;1135   
                          ENDP


                          AREA ||i.LCD_DrawTriangle||, CODE, READONLY, ALIGN=1

                  LCD_DrawTriangle PROC
;;;1143   //(x0,y0),(x1,y1),(x2,y2):三角形的三角坐标
;;;1144   void LCD_DrawTriangle(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
000000  b570              PUSH     {r4-r6,lr}
;;;1145   {
000002  ac04              ADD      r4,sp,#0x10
000004  cc70              LDM      r4,{r4-r6}
;;;1146   }
000006  bd70              POP      {r4-r6,pc}
;;;1147   
                          ENDP


                          AREA ||i.LCD_Fill||, CODE, READONLY, ALIGN=1

                  LCD_Fill PROC
;;;956    //color:要填充的颜色
;;;957    void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;958    {          
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;959    	u16 i,j;
;;;960    	u16 xlen=0;
000010  f04f0b00          MOV      r11,#0
;;;961    //	u16 temp;
;;;962    	xlen=ex-sx+1;	 
000014  1b78              SUBS     r0,r7,r5
000016  1c40              ADDS     r0,r0,#1
000018  fa1ffb80          UXTH     r11,r0
;;;963    	for(i=sy;i<=ey;i++)
00001c  4634              MOV      r4,r6
00001e  e011              B        |L18.68|
                  |L18.32|
;;;964    	{
;;;965    	 	lcd_cursor(sx,i);      				//设置光标位置  
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       lcd_cursor
;;;966    		for(j=0;j<xlen;j++)
000028  f04f0900          MOV      r9,#0
00002c  e006              B        |L18.60|
                  |L18.46|
;;;967    			LCD_WR_16Bit(color);	//显示颜色 	    
00002e  4650              MOV      r0,r10
000030  f7fffffe          BL       LCD_WR_16Bit
000034  f1090001          ADD      r0,r9,#1              ;966
000038  fa1ff980          UXTH     r9,r0                 ;966
                  |L18.60|
00003c  45d9              CMP      r9,r11                ;966
00003e  dbf6              BLT      |L18.46|
000040  1c60              ADDS     r0,r4,#1              ;963
000042  b284              UXTH     r4,r0                 ;963
                  |L18.68|
000044  4544              CMP      r4,r8                 ;963
000046  ddeb              BLE      |L18.32|
;;;968    	}	 
;;;969    }  
000048  e8bd9ff0          POP      {r4-r12,pc}
;;;970    //在指定区域内填充指定颜色块			 
                          ENDP


                          AREA ||i.LCD_FillCircle||, CODE, READONLY, ALIGN=1

                  LCD_FillCircle PROC
;;;1089   //r    :半径
;;;1090   void LCD_FillCircle(u16 x0, u16 y0, u8 r, u16 color)
000000  4770              BX       lr
;;;1091   {
;;;1092   }
;;;1093   
                          ENDP


                          AREA ||i.LCD_FillRect||, CODE, READONLY, ALIGN=1

                  LCD_FillRect PROC
;;;1105   //(x1,y1),(x2,y2):矩形的对角坐标
;;;1106   void LCD_FillRect(u16 x1, u16 y1, u16 x2, u16 y2, u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1107   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1108       LCD_Fill(x1,y1,x2,y2, color);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f8cd8000          STR      r8,[sp,#0]
00001c  f7fffffe          BL       LCD_Fill
;;;1109   }
000020  e8bd83f8          POP      {r3-r9,pc}
;;;1110   
                          ENDP


                          AREA ||i.LCD_FillRoundRect||, CODE, READONLY, ALIGN=1

                  LCD_FillRoundRect PROC
;;;1137   //(x1,y1),(x2,y2):矩形的对角坐标
;;;1138   void LCD_FillRoundRect(u16 x1, u16 y1, u16 x2, u16 y2, u16 r, u16 color)
000000  b530              PUSH     {r4,r5,lr}
;;;1139   {
000002  e9dd4503          LDRD     r4,r5,[sp,#0xc]
;;;1140   }
000006  bd30              POP      {r4,r5,pc}
;;;1141   
                          ENDP


                          AREA ||i.LCD_GPIO_Init||, CODE, READONLY, ALIGN=2

                  LCD_GPIO_Init PROC
;;;365    //BK PE4 A0(RS/DC) PE2 RES PE5 CS PE3
;;;366    void LCD_GPIO_Init(void)
000000  b508              PUSH     {r3,lr}
;;;367    {
;;;368    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;369    
;;;370    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);//使能GPIOA,C时钟
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;371    
;;;372    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;	//PA4推挽输出
00000a  f44f50e0          MOV      r0,#0x1c00
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;373    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//普通输出模式
000012  2010              MOVS     r0,#0x10
000014  f88d0003          STRB     r0,[sp,#3]
;;;374    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//100MHz
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;375    	GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化PA4
00001e  4669              MOV      r1,sp
000020  4803              LDR      r0,|L22.48|
000022  f7fffffe          BL       GPIO_Init
;;;376    
;;;377    	LCD_CS = 1;			//SPI片选取消
000026  2001              MOVS     r0,#1
000028  4902              LDR      r1,|L22.52|
00002a  6008              STR      r0,[r1,#0]
;;;378    
;;;379    	//SPI_Init_n(LCD_SPI);    		//初始化LCD_SPI 
;;;380    
;;;381    	//SPI_SetSpeed(LCD_SPI, SPI_BaudRatePrescaler_4);
;;;382    
;;;383    	//	LCD_SPI_Init();//针对LCD的特点修改SPI的设置
;;;384    }
00002c  bd08              POP      {r3,pc}
;;;385    
                          ENDP

00002e  0000              DCW      0x0000
                  |L22.48|
                          DCD      0x40010c00
                  |L22.52|
                          DCD      0x422181b0

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;386    
;;;387    void LCD_Init(void)
000000  b508              PUSH     {r3,lr}
;;;388    {
;;;389    	uint16_t light_temp = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;390    	LCD_GPIO_Init();
000006  f7fffffe          BL       LCD_GPIO_Init
;;;391    	LCD_Light_Init();
00000a  f7fffffe          BL       LCD_Light_Init
;;;392    
;;;393    	LCD_RESET();	//复位液晶
00000e  f7fffffe          BL       LCD_RESET
;;;394    
;;;395    #if defined (TFT_ST7735_1_44) || defined (TFT_ST7735_1_8)
;;;396    
;;;397    	LCD_WR(LCD_CMD, 0x11);	//退出睡眠
000012  2111              MOVS     r1,#0x11
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       LCD_WR
;;;398    	bsp_DelayMS(120);
00001a  2078              MOVS     r0,#0x78
00001c  f7fffffe          BL       bsp_DelayMS
;;;399    
;;;400    	//ST7735R Frame Rate
;;;401    	LCD_WR(LCD_CMD, 0xB1);		//Frame Rate Control 帧率控制
000020  21b1              MOVS     r1,#0xb1
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       LCD_WR
;;;402    	LCD_WR(LCD_DATA, 0x01);
000028  2101              MOVS     r1,#1
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       LCD_WR
;;;403    	LCD_WR(LCD_DATA, 0x2C);
000030  212c              MOVS     r1,#0x2c
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       LCD_WR
;;;404    	LCD_WR(LCD_DATA, 0x2D);
000038  212d              MOVS     r1,#0x2d
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       LCD_WR
;;;405    
;;;406    	LCD_WR(LCD_CMD, 0xB2);
000040  21b2              MOVS     r1,#0xb2
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       LCD_WR
;;;407    	LCD_WR(LCD_DATA, 0x01);
000048  2101              MOVS     r1,#1
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       LCD_WR
;;;408    	LCD_WR(LCD_DATA, 0x2C);
000050  212c              MOVS     r1,#0x2c
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       LCD_WR
;;;409    	LCD_WR(LCD_DATA, 0x2D);
000058  212d              MOVS     r1,#0x2d
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       LCD_WR
;;;410    
;;;411    	LCD_WR(LCD_CMD, 0xB3);
000060  21b3              MOVS     r1,#0xb3
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       LCD_WR
;;;412    	LCD_WR(LCD_DATA, 0x01);
000068  2101              MOVS     r1,#1
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       LCD_WR
;;;413    	LCD_WR(LCD_DATA, 0x2C);
000070  212c              MOVS     r1,#0x2c
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       LCD_WR
;;;414    	LCD_WR(LCD_DATA, 0x2D);
000078  212d              MOVS     r1,#0x2d
00007a  2001              MOVS     r0,#1
00007c  f7fffffe          BL       LCD_WR
;;;415    	LCD_WR(LCD_DATA, 0x01);
000080  2101              MOVS     r1,#1
000082  4608              MOV      r0,r1
000084  f7fffffe          BL       LCD_WR
;;;416    	LCD_WR(LCD_DATA, 0x2C);
000088  212c              MOVS     r1,#0x2c
00008a  2001              MOVS     r0,#1
00008c  f7fffffe          BL       LCD_WR
;;;417    	LCD_WR(LCD_DATA, 0x2D);
000090  212d              MOVS     r1,#0x2d
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       LCD_WR
;;;418    
;;;419    	LCD_WR(LCD_CMD, 0xB4); //Display Inversion Control 显示反转控制
000098  21b4              MOVS     r1,#0xb4
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       LCD_WR
;;;420    	LCD_WR(LCD_DATA, 0x07);
0000a0  2107              MOVS     r1,#7
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       LCD_WR
;;;421    
;;;422    	//ST7735R Power Sequence
;;;423    	LCD_WR(LCD_CMD, 0xC0);
0000a8  21c0              MOVS     r1,#0xc0
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       LCD_WR
;;;424    	LCD_WR(LCD_DATA, 0xA2);
0000b0  21a2              MOVS     r1,#0xa2
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       LCD_WR
;;;425    	LCD_WR(LCD_DATA, 0x02);
0000b8  2102              MOVS     r1,#2
0000ba  2001              MOVS     r0,#1
0000bc  f7fffffe          BL       LCD_WR
;;;426    	LCD_WR(LCD_DATA, 0x84);
0000c0  2184              MOVS     r1,#0x84
0000c2  2001              MOVS     r0,#1
0000c4  f7fffffe          BL       LCD_WR
;;;427    
;;;428    	LCD_WR(LCD_CMD, 0xC1);
0000c8  21c1              MOVS     r1,#0xc1
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       LCD_WR
;;;429    	LCD_WR(LCD_DATA, 0xC5);
0000d0  21c5              MOVS     r1,#0xc5
0000d2  2001              MOVS     r0,#1
0000d4  f7fffffe          BL       LCD_WR
;;;430    
;;;431    	LCD_WR(LCD_CMD, 0xC2);
0000d8  21c2              MOVS     r1,#0xc2
0000da  2000              MOVS     r0,#0
0000dc  f7fffffe          BL       LCD_WR
;;;432    	LCD_WR(LCD_DATA, 0x0A);
0000e0  210a              MOVS     r1,#0xa
0000e2  2001              MOVS     r0,#1
0000e4  f7fffffe          BL       LCD_WR
;;;433    	LCD_WR(LCD_DATA, 0x00);
0000e8  2100              MOVS     r1,#0
0000ea  2001              MOVS     r0,#1
0000ec  f7fffffe          BL       LCD_WR
;;;434    
;;;435    	LCD_WR(LCD_CMD, 0xC3);
0000f0  21c3              MOVS     r1,#0xc3
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       LCD_WR
;;;436    	LCD_WR(LCD_DATA, 0x8A);
0000f8  218a              MOVS     r1,#0x8a
0000fa  2001              MOVS     r0,#1
0000fc  f7fffffe          BL       LCD_WR
;;;437    	LCD_WR(LCD_DATA, 0x2A);
000100  212a              MOVS     r1,#0x2a
000102  2001              MOVS     r0,#1
000104  f7fffffe          BL       LCD_WR
;;;438    
;;;439    	LCD_WR(LCD_CMD, 0xC4);
000108  21c4              MOVS     r1,#0xc4
00010a  2000              MOVS     r0,#0
00010c  f7fffffe          BL       LCD_WR
;;;440    	LCD_WR(LCD_DATA, 0x8A);
000110  218a              MOVS     r1,#0x8a
000112  2001              MOVS     r0,#1
000114  f7fffffe          BL       LCD_WR
;;;441    	LCD_WR(LCD_DATA, 0xEE);
000118  21ee              MOVS     r1,#0xee
00011a  2001              MOVS     r0,#1
00011c  f7fffffe          BL       LCD_WR
;;;442    
;;;443    	LCD_WR(LCD_CMD, 0xC5); //VCOM 
000120  21c5              MOVS     r1,#0xc5
000122  2000              MOVS     r0,#0
000124  f7fffffe          BL       LCD_WR
;;;444    	LCD_WR(LCD_DATA, 0x0E);
000128  210e              MOVS     r1,#0xe
00012a  2001              MOVS     r0,#1
00012c  f7fffffe          BL       LCD_WR
;;;445    
;;;446    	LCD_WR(LCD_CMD, 0x36); //MX, MY, RGB mode 	Memory Data Access Control	 		 
000130  2136              MOVS     r1,#0x36
000132  2000              MOVS     r0,#0
000134  f7fffffe          BL       LCD_WR
;;;447    	LCD_WR(LCD_DATA, 0xC0 | LCD_RGB);
000138  21c0              MOVS     r1,#0xc0
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       LCD_WR
;;;448    
;;;449    	//ST7735R Gamma Sequence
;;;450    	LCD_WR(LCD_CMD, 0xe0);	//Gamma (‘+’polarity) Correction Characteristics Setting
000140  21e0              MOVS     r1,#0xe0
000142  2000              MOVS     r0,#0
000144  f7fffffe          BL       LCD_WR
;;;451    	LCD_WR(LCD_DATA, 0x0f);
000148  210f              MOVS     r1,#0xf
00014a  2001              MOVS     r0,#1
00014c  f7fffffe          BL       LCD_WR
;;;452    	LCD_WR(LCD_DATA, 0x1a);
000150  211a              MOVS     r1,#0x1a
000152  2001              MOVS     r0,#1
000154  f7fffffe          BL       LCD_WR
;;;453    	LCD_WR(LCD_DATA, 0x0f);
000158  210f              MOVS     r1,#0xf
00015a  2001              MOVS     r0,#1
00015c  f7fffffe          BL       LCD_WR
;;;454    	LCD_WR(LCD_DATA, 0x18);
000160  2118              MOVS     r1,#0x18
000162  2001              MOVS     r0,#1
000164  f7fffffe          BL       LCD_WR
;;;455    	LCD_WR(LCD_DATA, 0x2f);
000168  212f              MOVS     r1,#0x2f
00016a  2001              MOVS     r0,#1
00016c  f7fffffe          BL       LCD_WR
;;;456    	LCD_WR(LCD_DATA, 0x28);
000170  2128              MOVS     r1,#0x28
000172  2001              MOVS     r0,#1
000174  f7fffffe          BL       LCD_WR
;;;457    	LCD_WR(LCD_DATA, 0x20);
000178  2120              MOVS     r1,#0x20
00017a  2001              MOVS     r0,#1
00017c  f7fffffe          BL       LCD_WR
;;;458    	LCD_WR(LCD_DATA, 0x22);
000180  2122              MOVS     r1,#0x22
000182  2001              MOVS     r0,#1
000184  f7fffffe          BL       LCD_WR
;;;459    	LCD_WR(LCD_DATA, 0x1f);
000188  211f              MOVS     r1,#0x1f
00018a  2001              MOVS     r0,#1
00018c  f7fffffe          BL       LCD_WR
;;;460    	LCD_WR(LCD_DATA, 0x1b);
000190  211b              MOVS     r1,#0x1b
000192  2001              MOVS     r0,#1
000194  f7fffffe          BL       LCD_WR
;;;461    	LCD_WR(LCD_DATA, 0x23);
000198  2123              MOVS     r1,#0x23
00019a  2001              MOVS     r0,#1
00019c  f7fffffe          BL       LCD_WR
;;;462    	LCD_WR(LCD_DATA, 0x37);
0001a0  2137              MOVS     r1,#0x37
0001a2  2001              MOVS     r0,#1
0001a4  f7fffffe          BL       LCD_WR
;;;463    	LCD_WR(LCD_DATA, 0x00);
0001a8  2100              MOVS     r1,#0
0001aa  2001              MOVS     r0,#1
0001ac  f7fffffe          BL       LCD_WR
;;;464    	LCD_WR(LCD_DATA, 0x07);
0001b0  2107              MOVS     r1,#7
0001b2  2001              MOVS     r0,#1
0001b4  f7fffffe          BL       LCD_WR
;;;465    	LCD_WR(LCD_DATA, 0x02);
0001b8  2102              MOVS     r1,#2
0001ba  2001              MOVS     r0,#1
0001bc  f7fffffe          BL       LCD_WR
;;;466    	LCD_WR(LCD_DATA, 0x10);
0001c0  2110              MOVS     r1,#0x10
0001c2  2001              MOVS     r0,#1
0001c4  f7fffffe          BL       LCD_WR
;;;467    
;;;468    	LCD_WR(LCD_CMD, 0xe1); //Gamma (‘-’polarity) Correction Characteristics Setting
0001c8  21e1              MOVS     r1,#0xe1
0001ca  2000              MOVS     r0,#0
0001cc  f7fffffe          BL       LCD_WR
;;;469    	LCD_WR(LCD_DATA, 0x0f);
0001d0  210f              MOVS     r1,#0xf
0001d2  2001              MOVS     r0,#1
0001d4  f7fffffe          BL       LCD_WR
;;;470    	LCD_WR(LCD_DATA, 0x1b);
0001d8  211b              MOVS     r1,#0x1b
0001da  2001              MOVS     r0,#1
0001dc  f7fffffe          BL       LCD_WR
;;;471    	LCD_WR(LCD_DATA, 0x0f);
0001e0  210f              MOVS     r1,#0xf
0001e2  2001              MOVS     r0,#1
0001e4  f7fffffe          BL       LCD_WR
;;;472    	LCD_WR(LCD_DATA, 0x17);
0001e8  2117              MOVS     r1,#0x17
0001ea  2001              MOVS     r0,#1
0001ec  f7fffffe          BL       LCD_WR
;;;473    	LCD_WR(LCD_DATA, 0x33);
0001f0  2133              MOVS     r1,#0x33
0001f2  2001              MOVS     r0,#1
0001f4  f7fffffe          BL       LCD_WR
;;;474    	LCD_WR(LCD_DATA, 0x2c);
0001f8  212c              MOVS     r1,#0x2c
0001fa  2001              MOVS     r0,#1
0001fc  f7fffffe          BL       LCD_WR
;;;475    	LCD_WR(LCD_DATA, 0x29);
000200  2129              MOVS     r1,#0x29
000202  2001              MOVS     r0,#1
000204  f7fffffe          BL       LCD_WR
;;;476    	LCD_WR(LCD_DATA, 0x2e);
000208  212e              MOVS     r1,#0x2e
00020a  2001              MOVS     r0,#1
00020c  f7fffffe          BL       LCD_WR
;;;477    	LCD_WR(LCD_DATA, 0x30);
000210  2130              MOVS     r1,#0x30
000212  2001              MOVS     r0,#1
000214  f7fffffe          BL       LCD_WR
;;;478    	LCD_WR(LCD_DATA, 0x30);
000218  2130              MOVS     r1,#0x30
00021a  2001              MOVS     r0,#1
00021c  f7fffffe          BL       LCD_WR
;;;479    	LCD_WR(LCD_DATA, 0x39);
000220  2139              MOVS     r1,#0x39
000222  2001              MOVS     r0,#1
000224  f7fffffe          BL       LCD_WR
;;;480    	LCD_WR(LCD_DATA, 0x3f);
000228  213f              MOVS     r1,#0x3f
00022a  2001              MOVS     r0,#1
00022c  f7fffffe          BL       LCD_WR
;;;481    	LCD_WR(LCD_DATA, 0x00);
000230  2100              MOVS     r1,#0
000232  2001              MOVS     r0,#1
000234  f7fffffe          BL       LCD_WR
;;;482    	LCD_WR(LCD_DATA, 0x07);
000238  2107              MOVS     r1,#7
00023a  2001              MOVS     r0,#1
00023c  f7fffffe          BL       LCD_WR
;;;483    	LCD_WR(LCD_DATA, 0x03);
000240  2103              MOVS     r1,#3
000242  2001              MOVS     r0,#1
000244  f7fffffe          BL       LCD_WR
;;;484    	LCD_WR(LCD_DATA, 0x10);
000248  2110              MOVS     r1,#0x10
00024a  2001              MOVS     r0,#1
00024c  f7fffffe          BL       LCD_WR
;;;485    
;;;486    	LCD_WR(LCD_CMD, 0x2a);	//Column Address Set
000250  212a              MOVS     r1,#0x2a
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       LCD_WR
;;;487    	LCD_WR(LCD_DATA, 0x00);
000258  2100              MOVS     r1,#0
00025a  2001              MOVS     r0,#1
00025c  f7fffffe          BL       LCD_WR
;;;488    	LCD_WR(LCD_DATA, 0x02);
000260  2102              MOVS     r1,#2
000262  2001              MOVS     r0,#1
000264  f7fffffe          BL       LCD_WR
;;;489    	LCD_WR(LCD_DATA, 0x00);
000268  2100              MOVS     r1,#0
00026a  2001              MOVS     r0,#1
00026c  f7fffffe          BL       LCD_WR
;;;490    	LCD_WR(LCD_DATA, 0x7f);	//128*128 为0x7f 128*160 0x81
000270  217f              MOVS     r1,#0x7f
000272  2001              MOVS     r0,#1
000274  f7fffffe          BL       LCD_WR
;;;491    
;;;492    	LCD_WR(LCD_CMD, 0x2b);	//Row Address Set
000278  212b              MOVS     r1,#0x2b
00027a  2000              MOVS     r0,#0
00027c  f7fffffe          BL       LCD_WR
;;;493    	LCD_WR(LCD_DATA, 0x00);
000280  2100              MOVS     r1,#0
000282  2001              MOVS     r0,#1
000284  f7fffffe          BL       LCD_WR
;;;494    	LCD_WR(LCD_DATA, 0x01);
000288  2101              MOVS     r1,#1
00028a  4608              MOV      r0,r1
00028c  f7fffffe          BL       LCD_WR
;;;495    	LCD_WR(LCD_DATA, 0x00);
000290  2100              MOVS     r1,#0
000292  2001              MOVS     r0,#1
000294  f7fffffe          BL       LCD_WR
;;;496    	LCD_WR(LCD_DATA, 0x9f);	////128*128 为0x7f，128*160为0x9f 默认设置为0x9f
000298  219f              MOVS     r1,#0x9f
00029a  2001              MOVS     r0,#1
00029c  f7fffffe          BL       LCD_WR
;;;497    
;;;498    	LCD_WR(LCD_CMD, 0xF0); //Enable test command  
0002a0  21f0              MOVS     r1,#0xf0
0002a2  2000              MOVS     r0,#0
0002a4  f7fffffe          BL       LCD_WR
;;;499    	LCD_WR(LCD_DATA, 0x01);
0002a8  2101              MOVS     r1,#1
0002aa  4608              MOV      r0,r1
0002ac  f7fffffe          BL       LCD_WR
;;;500    	LCD_WR(LCD_CMD, 0xF6); //Disable ram power save mode 
0002b0  21f6              MOVS     r1,#0xf6
0002b2  2000              MOVS     r0,#0
0002b4  f7fffffe          BL       LCD_WR
;;;501    	LCD_WR(LCD_DATA, 0x00);
0002b8  2100              MOVS     r1,#0
0002ba  2001              MOVS     r0,#1
0002bc  f7fffffe          BL       LCD_WR
;;;502    
;;;503    	LCD_WR(LCD_CMD, 0x3A); //65k mode Interface Pixel Format
0002c0  213a              MOVS     r1,#0x3a
0002c2  2000              MOVS     r0,#0
0002c4  f7fffffe          BL       LCD_WR
;;;504    	LCD_WR(LCD_DATA, 0x05);
0002c8  2105              MOVS     r1,#5
0002ca  2001              MOVS     r0,#1
0002cc  f7fffffe          BL       LCD_WR
;;;505    
;;;506    	LCD_WR(LCD_CMD, 0x29);//Display on
0002d0  2129              MOVS     r1,#0x29
0002d2  2000              MOVS     r0,#0
0002d4  f7fffffe          BL       LCD_WR
;;;507    
;;;508    #elif defined (TFT_ILI9163_1_8)
;;;509    
;;;510    	LCD_WR(LCD_CMD, 0x11);       		  	//关闭睡眠，振荡器工作
;;;511    	bsp_DelayMS(100);
;;;512    
;;;513    	LCD_WR(LCD_CMD, 0x3a);       		  	//每次传送16位数据(VIPF3-0=0101)，每个像素16位(IFPF2-0=101)
;;;514    	LCD_WR(LCD_DATA, 0x55);
;;;515    
;;;516    	LCD_WR(LCD_CMD, 0x26);
;;;517    	LCD_WR(LCD_DATA, 0x04);
;;;518    
;;;519    	LCD_WR(LCD_CMD, 0xf2);              		//Driver Output Control(1)
;;;520    	LCD_WR(LCD_DATA, 0x01);
;;;521    
;;;522    	LCD_WR(LCD_CMD, 0xe0);              		//Driver Output Control(1)
;;;523    	LCD_WR(LCD_DATA, 0x3f);
;;;524    	LCD_WR(LCD_DATA, 0x25);
;;;525    	LCD_WR(LCD_DATA, 0x1c);
;;;526    	LCD_WR(LCD_DATA, 0x1e);
;;;527    	LCD_WR(LCD_DATA, 0x20);
;;;528    	LCD_WR(LCD_DATA, 0x12);
;;;529    	LCD_WR(LCD_DATA, 0x2a);
;;;530    	LCD_WR(LCD_DATA, 0x90);
;;;531    	LCD_WR(LCD_DATA, 0x24);
;;;532    	LCD_WR(LCD_DATA, 0x11);
;;;533    	LCD_WR(LCD_DATA, 0x00);
;;;534    	LCD_WR(LCD_DATA, 0x00);
;;;535    	LCD_WR(LCD_DATA, 0x00);
;;;536    	LCD_WR(LCD_DATA, 0x00);
;;;537    	LCD_WR(LCD_DATA, 0x00);
;;;538    
;;;539    	LCD_WR(LCD_CMD, 0xe1);              //Driver Output Control(1)
;;;540    	LCD_WR(LCD_DATA, 0x20);
;;;541    	LCD_WR(LCD_DATA, 0x20);
;;;542    	LCD_WR(LCD_DATA, 0x20);
;;;543    	LCD_WR(LCD_DATA, 0x20);
;;;544    	LCD_WR(LCD_DATA, 0x05);
;;;545    	LCD_WR(LCD_DATA, 0x00);
;;;546    	LCD_WR(LCD_DATA, 0x15);
;;;547    	LCD_WR(LCD_DATA, 0xa7);
;;;548    	LCD_WR(LCD_DATA, 0x3d);
;;;549    	LCD_WR(LCD_DATA, 0x18);
;;;550    	LCD_WR(LCD_DATA, 0x25);
;;;551    	LCD_WR(LCD_DATA, 0x2a);
;;;552    	LCD_WR(LCD_DATA, 0x2b);
;;;553    	LCD_WR(LCD_DATA, 0x2b);
;;;554    	LCD_WR(LCD_DATA, 0x3a);
;;;555    
;;;556    	LCD_WR(LCD_CMD, 0xb1);              	//设置屏幕刷新频率
;;;557    	LCD_WR(LCD_DATA, 0x08);				   	//DIVA=8
;;;558    	LCD_WR(LCD_DATA, 0x08);				   	//VPA =8，约90Hz
;;;559    
;;;560    	LCD_WR(LCD_CMD, 0xb4);              	//LCD Driveing control
;;;561    	LCD_WR(LCD_DATA, 0x07);				  	//NLA=1,NLB=1,NLC=1
;;;562    
;;;563    
;;;564    	LCD_WR(LCD_CMD, 0xc0);              //LCD Driveing control
;;;565    	LCD_WR(LCD_DATA, 0x0a);
;;;566    	LCD_WR(LCD_DATA, 0x02);
;;;567    
;;;568    	LCD_WR(LCD_CMD, 0xc1);              //LCD Driveing control
;;;569    	LCD_WR(LCD_DATA, 0x02);
;;;570    
;;;571    	LCD_WR(LCD_CMD, 0xc5);              //LCD Driveing control
;;;572    	LCD_WR(LCD_DATA, 0x4f);
;;;573    	LCD_WR(LCD_DATA, 0x5a);
;;;574    
;;;575    	LCD_WR(LCD_CMD, 0xc7);              //LCD Driveing control
;;;576    	LCD_WR(LCD_DATA, 0x40);
;;;577    
;;;578    	LCD_WR(LCD_CMD, 0x2a);              	//配置MCU可操作的LCD内部RAM横坐标起始、结束参数
;;;579    	LCD_WR(LCD_DATA, 0x00);				   	//横坐标起始地址0x0000
;;;580    	LCD_WR(LCD_DATA, 0x00);
;;;581    	LCD_WR(LCD_DATA, 0x00);				   	//横坐标结束地址0x007f(127)
;;;582    	LCD_WR(LCD_DATA, 0x7f);
;;;583    
;;;584    	LCD_WR(LCD_CMD, 0x2b);              	//配置MCU可操作的LCD内部RAM纵坐标起始结束参数
;;;585    	LCD_WR(LCD_DATA, 0x00);				   	//纵坐标起始地址0x0000
;;;586    	LCD_WR(LCD_DATA, 0x00);
;;;587    	LCD_WR(LCD_DATA, 0x00);				  	//纵坐标结束地址0x009f(159)
;;;588    	LCD_WR(LCD_DATA, 0x9f);
;;;589    
;;;590    	LCD_WR(LCD_CMD, 0x36);              	//配置MPU和DDRAM对应关系
;;;591    	LCD_WR(LCD_DATA, 0xc0);					//MX=1,MY=1
;;;592    
;;;593    	LCD_WR(LCD_CMD, 0xb7);              	//LCD Driveing control
;;;594    	LCD_WR(LCD_DATA, 0x00);				   	//CRL=0
;;;595    
;;;596    	LCD_WR(LCD_CMD, 0x29);   		  	//开启屏幕显示
;;;597    
;;;598    #elif defined (TFT_ILI9341_2_2)
;;;599    
;;;600    	LCD_WR(LCD_CMD, 0xCB);
;;;601    	LCD_WR(LCD_DATA, 0x39);
;;;602    	LCD_WR(LCD_DATA, 0x2C);
;;;603    	LCD_WR(LCD_DATA, 0x00);
;;;604    	LCD_WR(LCD_DATA, 0x34);
;;;605    	LCD_WR(LCD_DATA, 0x02);
;;;606    
;;;607    	LCD_WR(LCD_CMD, 0xCF);
;;;608    	LCD_WR(LCD_DATA, 0x00);
;;;609    	LCD_WR(LCD_DATA, 0XC1);
;;;610    	LCD_WR(LCD_DATA, 0X30);
;;;611    
;;;612    	LCD_WR(LCD_CMD, 0xE8);
;;;613    	LCD_WR(LCD_DATA, 0x85);
;;;614    	LCD_WR(LCD_DATA, 0x00);
;;;615    	LCD_WR(LCD_DATA, 0x78);
;;;616    
;;;617    	LCD_WR(LCD_CMD, 0xEA);
;;;618    	LCD_WR(LCD_DATA, 0x00);
;;;619    	LCD_WR(LCD_DATA, 0x00);
;;;620    
;;;621    	LCD_WR(LCD_CMD, 0xED);
;;;622    	LCD_WR(LCD_DATA, 0x64);
;;;623    	LCD_WR(LCD_DATA, 0x03);
;;;624    	LCD_WR(LCD_DATA, 0X12);
;;;625    	LCD_WR(LCD_DATA, 0X81);
;;;626    
;;;627    	LCD_WR(LCD_CMD, 0xF7);
;;;628    	LCD_WR(LCD_DATA, 0x20);
;;;629    
;;;630    	LCD_WR(LCD_CMD, 0xC0);    //Power control 
;;;631    	LCD_WR(LCD_DATA, 0x23);   //VRH[5:0] 
;;;632    
;;;633    	LCD_WR(LCD_CMD, 0xC1);    //Power control 
;;;634    	LCD_WR(LCD_DATA, 0x10);   //SAP[2:0];BT[3:0] 
;;;635    
;;;636    	LCD_WR(LCD_CMD, 0xC5);    //VCM control 
;;;637    	LCD_WR(LCD_DATA, 0x3e); //对比度调节
;;;638    	LCD_WR(LCD_DATA, 0x28);
;;;639    
;;;640    	LCD_WR(LCD_CMD, 0xC7);    //VCM control2 
;;;641    	LCD_WR(LCD_DATA, 0x86);  //--
;;;642    
;;;643    	LCD_WR(LCD_CMD, 0x36);    // Memory Access Control 
;;;644    	LCD_WR(LCD_DATA, 0x48);
;;;645    
;;;646    	LCD_WR(LCD_CMD, 0x3A);
;;;647    	LCD_WR(LCD_DATA, 0x55);
;;;648    
;;;649    	LCD_WR(LCD_CMD, 0xB1);
;;;650    	LCD_WR(LCD_DATA, 0x00);
;;;651    	LCD_WR(LCD_DATA, 0x18);
;;;652    
;;;653    	LCD_WR(LCD_CMD, 0xB6);    // Display Function Control 
;;;654    	LCD_WR(LCD_DATA, 0x08);
;;;655    	LCD_WR(LCD_DATA, 0x82);
;;;656    	LCD_WR(LCD_DATA, 0x27);
;;;657    
;;;658    	LCD_WR(LCD_CMD, 0xF2);    // 3Gamma Function Disable 
;;;659    	LCD_WR(LCD_DATA, 0x00);
;;;660    
;;;661    	LCD_WR(LCD_CMD, 0x26);    //Gamma curve selected 
;;;662    	LCD_WR(LCD_DATA, 0x01);
;;;663    
;;;664    	LCD_WR(LCD_CMD, 0xE0);    //Set Gamma 
;;;665    	LCD_WR(LCD_DATA, 0x0F);
;;;666    	LCD_WR(LCD_DATA, 0x31);
;;;667    	LCD_WR(LCD_DATA, 0x2B);
;;;668    	LCD_WR(LCD_DATA, 0x0C);
;;;669    	LCD_WR(LCD_DATA, 0x0E);
;;;670    	LCD_WR(LCD_DATA, 0x08);
;;;671    	LCD_WR(LCD_DATA, 0x4E);
;;;672    	LCD_WR(LCD_DATA, 0xF1);
;;;673    	LCD_WR(LCD_DATA, 0x37);
;;;674    	LCD_WR(LCD_DATA, 0x07);
;;;675    	LCD_WR(LCD_DATA, 0x10);
;;;676    	LCD_WR(LCD_DATA, 0x03);
;;;677    	LCD_WR(LCD_DATA, 0x0E);
;;;678    	LCD_WR(LCD_DATA, 0x09);
;;;679    	LCD_WR(LCD_DATA, 0x00);
;;;680    
;;;681    	LCD_WR(LCD_CMD, 0XE1);    //Set Gamma 
;;;682    	LCD_WR(LCD_DATA, 0x00);
;;;683    	LCD_WR(LCD_DATA, 0x0E);
;;;684    	LCD_WR(LCD_DATA, 0x14);
;;;685    	LCD_WR(LCD_DATA, 0x03);
;;;686    	LCD_WR(LCD_DATA, 0x11);
;;;687    	LCD_WR(LCD_DATA, 0x07);
;;;688    	LCD_WR(LCD_DATA, 0x31);
;;;689    	LCD_WR(LCD_DATA, 0xC1);
;;;690    	LCD_WR(LCD_DATA, 0x48);
;;;691    	LCD_WR(LCD_DATA, 0x08);
;;;692    	LCD_WR(LCD_DATA, 0x0F);
;;;693    	LCD_WR(LCD_DATA, 0x0C);
;;;694    	LCD_WR(LCD_DATA, 0x31);
;;;695    	LCD_WR(LCD_DATA, 0x36);
;;;696    	LCD_WR(LCD_DATA, 0x0F);
;;;697    
;;;698    	LCD_WR(LCD_CMD, 0x11);    //Exit Sleep 
;;;699    	bsp_DelayMS(120);
;;;700    
;;;701    	LCD_WR(LCD_CMD, 0x29);    //Display on 
;;;702    
;;;703    #endif
;;;704    
;;;705    	lcd_param();		//设置LCD参数
0002d8  f7fffffe          BL       lcd_param
;;;706    	LCD_Rotate(LLOOK);
0002dc  20a0              MOVS     r0,#0xa0
0002de  f7fffffe          BL       LCD_Rotate
;;;707    
;;;708    	bsp_ReadCpuFlash(LIGHT_ADDR, (uint8_t *)&light_temp, 2);
0002e2  2202              MOVS     r2,#2
0002e4  4669              MOV      r1,sp
0002e6  480b              LDR      r0,|L23.788|
0002e8  f7fffffe          BL       bsp_ReadCpuFlash
;;;709    
;;;710    	if ((light_temp == 0) || (light_temp > 9))
0002ec  f8bd0000          LDRH     r0,[sp,#0]
0002f0  b118              CBZ      r0,|L23.762|
0002f2  f8bd0000          LDRH     r0,[sp,#0]
0002f6  2809              CMP      r0,#9
0002f8  dd06              BLE      |L23.776|
                  |L23.762|
;;;711    	{
;;;712    		light_temp = 9;
0002fa  2009              MOVS     r0,#9
0002fc  9000              STR      r0,[sp,#0]
;;;713    		bsp_WriteCpuFlash(LIGHT_ADDR, (uint8_t *)&light_temp, 2);
0002fe  2202              MOVS     r2,#2
000300  4669              MOV      r1,sp
000302  4804              LDR      r0,|L23.788|
000304  f7fffffe          BL       bsp_WriteCpuFlash
                  |L23.776|
;;;714    	}
;;;715    
;;;716    	LCD_Light_Set(light_temp);	//点亮背光
000308  f8bd1000          LDRH     r1,[sp,#0]
00030c  b2c8              UXTB     r0,r1
00030e  f7fffffe          BL       LCD_Light_Set
;;;717    }
000312  bd08              POP      {r3,pc}
;;;718    
                          ENDP

                  |L23.788|
                          DCD      0x0800fc00

                          AREA ||i.LCD_Light_Init||, CODE, READONLY, ALIGN=2

                  LCD_Light_Init PROC
;;;727    //******************************************************************
;;;728    void LCD_Light_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;729    {
;;;730    #ifdef TFT_Light_Ctl	
;;;731    	bsp_SetTIMOutPWM(GPIOB, GPIO_Pin_1, TIM3, 4, 2000, 50);
000002  2032              MOVS     r0,#0x32
000004  f44f61fa          MOV      r1,#0x7d0
000008  2304              MOVS     r3,#4
00000a  4a04              LDR      r2,|L24.28|
00000c  e9cd1000          STRD     r1,r0,[sp,#0]
000010  2102              MOVS     r1,#2
000012  4803              LDR      r0,|L24.32|
000014  f7fffffe          BL       bsp_SetTIMOutPWM
;;;732    	//TIM11_PWM_Init(500 - 1, 84 - 1);	//84M/84=1Mhz的计数频率,重装载值500，所以PWM频率为 1M/500=2Khz. 
;;;733    #else
;;;734    
;;;735    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;736    
;;;737    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);//使能GPIOB时钟
;;;738    
;;;739    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;   //PB9推挽输出
;;;740    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;//普通输出模式
;;;741    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;//100MHz
;;;742    	GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化PB9
;;;743    
;;;744    #endif
;;;745    }
000018  bd1c              POP      {r2-r4,pc}
;;;746    
                          ENDP

00001a  0000              DCW      0x0000
                  |L24.28|
                          DCD      0x40000400
                  |L24.32|
                          DCD      0x40010c00

                          AREA ||i.LCD_Light_Set||, CODE, READONLY, ALIGN=2

                  LCD_Light_Set PROC
;;;755    //******************************************************************
;;;756    void LCD_Light_Set(u8 light)
000000  b510              PUSH     {r4,lr}
;;;757    {
000002  4604              MOV      r4,r0
;;;758    #if defined (TFT_Light_Ctl)	
;;;759    
;;;760    	if (light < 5)
000004  2c05              CMP      r4,#5
000006  da06              BGE      |L25.22|
;;;761    	{
;;;762    		TIM_SetCompare4(TIM3, 10 * light);   //修改比较值，修改占空比，因为用的TIM11的CH1，所以用TIM_SetCompare1，如果是CH2，就是TIM_SetCompare2
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  0041              LSLS     r1,r0,#1
00000e  4806              LDR      r0,|L25.40|
000010  f7fffffe          BL       TIM_SetCompare4
000014  e007              B        |L25.38|
                  |L25.22|
;;;763    	} 
;;;764    	else
;;;765    	{
;;;766    		TIM_SetCompare4(TIM3, 50 + 50 * (light - 5));   //修改比较值，修改占空比，因为用的TIM11的CH1，所以用TIM_SetCompare1，如果是CH2，就是TIM_SetCompare2
000016  1f60              SUBS     r0,r4,#5
000018  2232              MOVS     r2,#0x32
00001a  4350              MULS     r0,r2,r0
00001c  3032              ADDS     r0,r0,#0x32
00001e  b281              UXTH     r1,r0
000020  4801              LDR      r0,|L25.40|
000022  f7fffffe          BL       TIM_SetCompare4
                  |L25.38|
;;;767    	}
;;;768    
;;;769    #else
;;;770    
;;;771    	if (light == 0)
;;;772    	{
;;;773    		LCD_BK = 0;
;;;774    	}
;;;775    	else
;;;776    	{
;;;777    		LCD_BK = 1;
;;;778    	}
;;;779    
;;;780    #endif
;;;781    }
000026  bd10              POP      {r4,pc}
;;;782    
                          ENDP

                  |L25.40|
                          DCD      0x40000400

                          AREA ||i.LCD_RESET||, CODE, READONLY, ALIGN=2

                  LCD_RESET PROC
;;;353    //******************************************************************
;;;354    void LCD_RESET(void)
000000  b510              PUSH     {r4,lr}
;;;355    {
;;;356    	LCD_RES = 1;
000002  2001              MOVS     r0,#1
000004  4909              LDR      r1,|L26.44|
000006  6008              STR      r0,[r1,#0]
;;;357    	bsp_DelayMS(50);
000008  2032              MOVS     r0,#0x32
00000a  f7fffffe          BL       bsp_DelayMS
;;;358    	LCD_RES = 0;
00000e  2000              MOVS     r0,#0
000010  4907              LDR      r1,|L26.48|
000012  f8c101ac          STR      r0,[r1,#0x1ac]
;;;359    	bsp_DelayMS(50);
000016  2032              MOVS     r0,#0x32
000018  f7fffffe          BL       bsp_DelayMS
;;;360    	LCD_RES = 1;
00001c  2001              MOVS     r0,#1
00001e  4903              LDR      r1,|L26.44|
000020  6008              STR      r0,[r1,#0]
;;;361    	bsp_DelayMS(50);
000022  2032              MOVS     r0,#0x32
000024  f7fffffe          BL       bsp_DelayMS
;;;362    }
000028  bd10              POP      {r4,pc}
;;;363    
                          ENDP

00002a  0000              DCW      0x0000
                  |L26.44|
                          DCD      0x422181ac
                  |L26.48|
                          DCD      0x42218000

                          AREA ||i.LCD_Rotate||, CODE, READONLY, ALIGN=2

                  LCD_Rotate PROC
;;;868    
;;;869    void LCD_Rotate(u8 dir)
000000  b510              PUSH     {r4,lr}
;;;870    {
000002  4604              MOV      r4,r0
;;;871    	switch (dir)
000004  b1bc              CBZ      r4,|L27.54|
000006  2c60              CMP      r4,#0x60
000008  d03a              BEQ      |L27.128|
00000a  2ca0              CMP      r4,#0xa0
00000c  d025              BEQ      |L27.90|
00000e  2cc0              CMP      r4,#0xc0
000010  d149              BNE      |L27.166|
;;;872    	{
;;;873    	case DLOOK:		//0点在左上，正竖屏，默认情况
;;;874    		lcddev.dir = 0;
000012  2000              MOVS     r0,#0
000014  4925              LDR      r1,|L27.172|
000016  7088              STRB     r0,[r1,#2]
;;;875    		lcddev.base_width = LCD_BASE_WIDTH;
000018  8088              STRH     r0,[r1,#4]
;;;876    		lcddev.base_height = LCD_BASE_HEIGHT;
00001a  80c8              STRH     r0,[r1,#6]
;;;877    		lcddev.max_width = LCD_MAX_WIDTH;
00001c  2080              MOVS     r0,#0x80
00001e  8108              STRH     r0,[r1,#8]
;;;878    		lcddev.max_height = LCD_MAX_HEIGHT;
000020  20a0              MOVS     r0,#0xa0
000022  8148              STRH     r0,[r1,#0xa]
;;;879    		lcddev.move_width = LCD_MOVE_WIDTH;
000024  2002              MOVS     r0,#2
000026  8188              STRH     r0,[r1,#0xc]
;;;880    		lcddev.move_height = LCD_MOVE_HEIGHT;
000028  2001              MOVS     r0,#1
00002a  81c8              STRH     r0,[r1,#0xe]
;;;881    		LCD_WR_REG(LCD_DIR_REG, DLOOK | LCD_RGB);
00002c  21c0              MOVS     r1,#0xc0
00002e  2036              MOVS     r0,#0x36
000030  f7fffffe          BL       LCD_WR_REG
;;;882    		break;
000034  e038              B        |L27.168|
                  |L27.54|
;;;883    	case ULOOK:		//0点在右下，倒竖屏
;;;884    		lcddev.dir = 0;
000036  2000              MOVS     r0,#0
000038  491c              LDR      r1,|L27.172|
00003a  7088              STRB     r0,[r1,#2]
;;;885    		lcddev.base_width = LCD_BASE_WIDTH;
00003c  8088              STRH     r0,[r1,#4]
;;;886    		lcddev.base_height = LCD_BASE_HEIGHT - LCD_BASE_HEIGHT;
00003e  80c8              STRH     r0,[r1,#6]
;;;887    		lcddev.max_width = LCD_MAX_WIDTH;
000040  2080              MOVS     r0,#0x80
000042  8108              STRH     r0,[r1,#8]
;;;888    		lcddev.max_height = LCD_MAX_HEIGHT - LCD_BASE_HEIGHT;
000044  20a0              MOVS     r0,#0xa0
000046  8148              STRH     r0,[r1,#0xa]
;;;889    		lcddev.move_width = LCD_MOVE_WIDTH;
000048  2002              MOVS     r0,#2
00004a  8188              STRH     r0,[r1,#0xc]
;;;890    		lcddev.move_height = LCD_MOVE_HEIGHT;
00004c  2001              MOVS     r0,#1
00004e  81c8              STRH     r0,[r1,#0xe]
;;;891    		LCD_WR_REG(LCD_DIR_REG, ULOOK | LCD_RGB);
000050  2100              MOVS     r1,#0
000052  2036              MOVS     r0,#0x36
000054  f7fffffe          BL       LCD_WR_REG
;;;892    		break;
000058  e026              B        |L27.168|
                  |L27.90|
;;;893    	case LLOOK:		//0点在右上，左看横屏
;;;894    		lcddev.dir = 1;
00005a  2001              MOVS     r0,#1
00005c  4913              LDR      r1,|L27.172|
00005e  7088              STRB     r0,[r1,#2]
;;;895    		lcddev.base_width = LCD_BASE_HEIGHT;
000060  2000              MOVS     r0,#0
000062  8088              STRH     r0,[r1,#4]
;;;896    		lcddev.base_height = LCD_BASE_WIDTH;
000064  80c8              STRH     r0,[r1,#6]
;;;897    		lcddev.max_width = LCD_MAX_HEIGHT;
000066  20a0              MOVS     r0,#0xa0
000068  8108              STRH     r0,[r1,#8]
;;;898    		lcddev.max_height = LCD_MAX_WIDTH;
00006a  2080              MOVS     r0,#0x80
00006c  8148              STRH     r0,[r1,#0xa]
;;;899    		lcddev.move_width = LCD_MOVE_HEIGHT;
00006e  2001              MOVS     r0,#1
000070  8188              STRH     r0,[r1,#0xc]
;;;900    		lcddev.move_height = LCD_MOVE_WIDTH;
000072  2002              MOVS     r0,#2
000074  81c8              STRH     r0,[r1,#0xe]
;;;901    		LCD_WR_REG(LCD_DIR_REG, LLOOK | LCD_RGB);
000076  21a0              MOVS     r1,#0xa0
000078  2036              MOVS     r0,#0x36
00007a  f7fffffe          BL       LCD_WR_REG
;;;902    		break;
00007e  e013              B        |L27.168|
                  |L27.128|
;;;903    	case RLOOK:		//0点在左下，右看横屏
;;;904    		lcddev.dir = 1;
000080  2001              MOVS     r0,#1
000082  490a              LDR      r1,|L27.172|
000084  7088              STRB     r0,[r1,#2]
;;;905    		lcddev.base_width = LCD_BASE_HEIGHT - LCD_BASE_HEIGHT;
000086  2000              MOVS     r0,#0
000088  8088              STRH     r0,[r1,#4]
;;;906    		lcddev.base_height = LCD_BASE_WIDTH;
00008a  80c8              STRH     r0,[r1,#6]
;;;907    		lcddev.max_width = LCD_MAX_HEIGHT - LCD_BASE_HEIGHT;
00008c  20a0              MOVS     r0,#0xa0
00008e  8108              STRH     r0,[r1,#8]
;;;908    		lcddev.max_height = LCD_MAX_WIDTH;
000090  2080              MOVS     r0,#0x80
000092  8148              STRH     r0,[r1,#0xa]
;;;909    		lcddev.move_width = LCD_MOVE_HEIGHT;
000094  2001              MOVS     r0,#1
000096  8188              STRH     r0,[r1,#0xc]
;;;910    		lcddev.move_height = LCD_MOVE_WIDTH;
000098  2002              MOVS     r0,#2
00009a  81c8              STRH     r0,[r1,#0xe]
;;;911    		LCD_WR_REG(LCD_DIR_REG, RLOOK | LCD_RGB);
00009c  2160              MOVS     r1,#0x60
00009e  2036              MOVS     r0,#0x36
0000a0  f7fffffe          BL       LCD_WR_REG
;;;912    		break;
0000a4  e000              B        |L27.168|
                  |L27.166|
;;;913    	default:
;;;914    		break;
0000a6  bf00              NOP      
                  |L27.168|
0000a8  bf00              NOP                            ;882
;;;915    	}
;;;916    }
0000aa  bd10              POP      {r4,pc}
;;;917    
                          ENDP

                  |L27.172|
                          DCD      lcddev

                          AREA ||i.LCD_WR||, CODE, READONLY, ALIGN=2

                  LCD_WR PROC
;;;274    //cmd:数据/命令标志 0,表示命令;1,表示数据;
;;;275    void LCD_WR(u8 cmd, u8 data1)
000000  b570              PUSH     {r4-r6,lr}
;;;276    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;277    	LCD_CS = 0;
000006  2000              MOVS     r0,#0
000008  4909              LDR      r1,|L28.48|
00000a  6008              STR      r0,[r1,#0]
;;;278    	if (cmd)
00000c  b125              CBZ      r5,|L28.24|
;;;279    	{
;;;280    		LCD_A0 = 1;
00000e  2001              MOVS     r0,#1
000010  4907              LDR      r1,|L28.48|
000012  3908              SUBS     r1,r1,#8
000014  6008              STR      r0,[r1,#0]
000016  e003              B        |L28.32|
                  |L28.24|
;;;281    	}
;;;282    	else
;;;283    	{
;;;284    		LCD_A0 = 0;
000018  2000              MOVS     r0,#0
00001a  4905              LDR      r1,|L28.48|
00001c  3908              SUBS     r1,r1,#8
00001e  6008              STR      r0,[r1,#0]
                  |L28.32|
;;;285    	}
;;;286    	bsp_spiWrite1(data1);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       bsp_spiWrite1
;;;287    	LCD_CS = 1;
000026  2001              MOVS     r0,#1
000028  4901              LDR      r1,|L28.48|
00002a  6008              STR      r0,[r1,#0]
;;;288    }
00002c  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

00002e  0000              DCW      0x0000
                  |L28.48|
                          DCD      0x422181b0

                          AREA ||i.LCD_WR_16Bit||, CODE, READONLY, ALIGN=2

                  LCD_WR_16Bit PROC
;;;289    
;;;290    void LCD_WR_16Bit(u16 data1)
000000  b510              PUSH     {r4,lr}
;;;291    {
000002  4604              MOV      r4,r0
;;;292    	LCD_CS = 0;
000004  2000              MOVS     r0,#0
000006  4908              LDR      r1,|L29.40|
000008  6008              STR      r0,[r1,#0]
;;;293    	LCD_A0 = 1;
00000a  2001              MOVS     r0,#1
00000c  4907              LDR      r1,|L29.44|
00000e  f8c101a8          STR      r0,[r1,#0x1a8]
;;;294    	bsp_spiWrite1(data1 >> 8);
000012  1220              ASRS     r0,r4,#8
000014  f7fffffe          BL       bsp_spiWrite1
;;;295    	bsp_spiWrite1(data1);
000018  b2e0              UXTB     r0,r4
00001a  f7fffffe          BL       bsp_spiWrite1
;;;296    	LCD_CS = 1;
00001e  2001              MOVS     r0,#1
000020  4901              LDR      r1,|L29.40|
000022  6008              STR      r0,[r1,#0]
;;;297    }
000024  bd10              POP      {r4,pc}
;;;298    
                          ENDP

000026  0000              DCW      0x0000
                  |L29.40|
                          DCD      0x422181b0
                  |L29.44|
                          DCD      0x42218000

                          AREA ||i.LCD_WR_GRAM||, CODE, READONLY, ALIGN=2

                  LCD_WR_GRAM PROC
;;;324    //******************************************************************
;;;325    void LCD_WR_GRAM(void)
000000  b510              PUSH     {r4,lr}
;;;326    {
;;;327    	LCD_WR(LCD_CMD, lcddev.wramcmd);
000002  4803              LDR      r0,|L30.16|
000004  7c01              LDRB     r1,[r0,#0x10]  ; lcddev
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       LCD_WR
;;;328    }
00000c  bd10              POP      {r4,pc}
;;;329    
                          ENDP

00000e  0000              DCW      0x0000
                  |L30.16|
                          DCD      lcddev

                          AREA ||i.LCD_WR_REG||, CODE, READONLY, ALIGN=1

                  LCD_WR_REG PROC
;;;308    //******************************************************************
;;;309    void LCD_WR_REG(u8 LCD_Reg, u8 LCD_RegValue)
000000  b570              PUSH     {r4-r6,lr}
;;;310    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;311    	LCD_WR(LCD_CMD, LCD_Reg);
000006  4621              MOV      r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LCD_WR
;;;312    	LCD_WR(LCD_DATA, LCD_RegValue);
00000e  4629              MOV      r1,r5
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       LCD_WR
;;;313    }
000016  bd70              POP      {r4-r6,pc}
;;;314    
                          ENDP


                          AREA ||i.LCD_print||, CODE, READONLY, ALIGN=2

                  LCD_print PROC
;;;1656   
;;;1657   void LCD_print(const char * text)
000000  b510              PUSH     {r4,lr}
;;;1658   {
000002  4604              MOV      r4,r0
;;;1659   	LCD_textWrap(text, cursor_x, cursor_y);
000004  4803              LDR      r0,|L32.20|
000006  8802              LDRH     r2,[r0,#0]  ; cursor_y
000008  4803              LDR      r0,|L32.24|
00000a  8801              LDRH     r1,[r0,#0]  ; cursor_x
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_textWrap
;;;1660   }
000012  bd10              POP      {r4,pc}
;;;1661   
                          ENDP

                  |L32.20|
                          DCD      cursor_y
                  |L32.24|
                          DCD      cursor_x

                          AREA ||i.LCD_println||, CODE, READONLY, ALIGN=2

                  LCD_println PROC
;;;1661   
;;;1662   void LCD_println(const char * text)
000000  b510              PUSH     {r4,lr}
;;;1663   {
000002  4604              MOV      r4,r0
;;;1664   	LCD_textWrap(text, cursor_x, cursor_y);
000004  4805              LDR      r0,|L33.28|
000006  8802              LDRH     r2,[r0,#0]  ; cursor_y
000008  4805              LDR      r0,|L33.32|
00000a  8801              LDRH     r1,[r0,#0]  ; cursor_x
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_textWrap
;;;1665   	LCD_write('\n');
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       LCD_write
;;;1666   }
000018  bd10              POP      {r4,pc}
;;;1667   
                          ENDP

00001a  0000              DCW      0x0000
                  |L33.28|
                          DCD      cursor_y
                  |L33.32|
                          DCD      cursor_x

                          AREA ||i.LCD_setCursor||, CODE, READONLY, ALIGN=2

                  LCD_setCursor PROC
;;;1624   
;;;1625   void LCD_setCursor(u16 x, u16 y)
000000  4a02              LDR      r2,|L34.12|
;;;1626   {
;;;1627   	cursor_x = x;
000002  8010              STRH     r0,[r2,#0]
;;;1628   	cursor_y = y;
000004  4a02              LDR      r2,|L34.16|
000006  8011              STRH     r1,[r2,#0]
;;;1629   }
000008  4770              BX       lr
;;;1630   
                          ENDP

00000a  0000              DCW      0x0000
                  |L34.12|
                          DCD      cursor_x
                  |L34.16|
                          DCD      cursor_y

                          AREA ||i.LCD_setTextColor||, CODE, READONLY, ALIGN=2

                  LCD_setTextColor PROC
;;;1613   
;;;1614   void LCD_setTextColor(u16 c, u16 b)
000000  4a02              LDR      r2,|L35.12|
;;;1615   {
;;;1616   	textcolor = c;
000002  8010              STRH     r0,[r2,#0]
;;;1617   	textbgcolor = b;
000004  4a02              LDR      r2,|L35.16|
000006  8011              STRH     r1,[r2,#0]
;;;1618   }
000008  4770              BX       lr
;;;1619   
                          ENDP

00000a  0000              DCW      0x0000
                  |L35.12|
                          DCD      textcolor
                  |L35.16|
                          DCD      textbgcolor

                          AREA ||i.LCD_setTextSize||, CODE, READONLY, ALIGN=2

                  LCD_setTextSize PROC
;;;1608   
;;;1609   void LCD_setTextSize(u8 s)
000000  2800              CMP      r0,#0
;;;1610   {
;;;1611   	textsize = (s > 0) ? s : 1;
000002  dd01              BLE      |L36.8|
000004  4601              MOV      r1,r0
000006  e000              B        |L36.10|
                  |L36.8|
000008  2101              MOVS     r1,#1
                  |L36.10|
00000a  4a01              LDR      r2,|L36.16|
00000c  7011              STRB     r1,[r2,#0]
;;;1612   }
00000e  4770              BX       lr
;;;1613   
                          ENDP

                  |L36.16|
                          DCD      textsize

                          AREA ||i.LCD_setTextWrap||, CODE, READONLY, ALIGN=2

                  LCD_setTextWrap PROC
;;;1619   
;;;1620   void LCD_setTextWrap(u8  w)
000000  4901              LDR      r1,|L37.8|
;;;1621   {
;;;1622   	wrap = w;
000002  7008              STRB     r0,[r1,#0]
;;;1623   }
000004  4770              BX       lr
;;;1624   
                          ENDP

000006  0000              DCW      0x0000
                  |L37.8|
                          DCD      wrap

                          AREA ||i.LCD_text||, CODE, READONLY, ALIGN=1

                  LCD_text PROC
;;;1630   
;;;1631   void LCD_text(const char * text, u16 x, u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;1632   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1633   	LCD_setTextWrap(FALSE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LCD_setTextWrap
;;;1634   	LCD_setCursor(x, y);
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       LCD_setCursor
;;;1635   	while (*text)
000016  e003              B        |L38.32|
                  |L38.24|
;;;1636   	{
;;;1637   		LCD_write(*text++);
000018  f8140b01          LDRB     r0,[r4],#1
00001c  f7fffffe          BL       LCD_write
                  |L38.32|
000020  7820              LDRB     r0,[r4,#0]            ;1635
000022  2800              CMP      r0,#0                 ;1635
000024  d1f8              BNE      |L38.24|
;;;1638   	}
;;;1639   }
000026  bd70              POP      {r4-r6,pc}
;;;1640   
                          ENDP


                          AREA ||i.LCD_textWrap||, CODE, READONLY, ALIGN=1

                  LCD_textWrap PROC
;;;1646   
;;;1647   void LCD_textWrap(const char * text, u16 x, u16 y)
000000  b570              PUSH     {r4-r6,lr}
;;;1648   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1649   	LCD_setTextWrap(TRUE);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       LCD_setTextWrap
;;;1650   	LCD_setCursor(x, y);
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       LCD_setCursor
;;;1651   	while (*text)
000016  e003              B        |L39.32|
                  |L39.24|
;;;1652   	{
;;;1653   		LCD_write(*text++);
000018  f8140b01          LDRB     r0,[r4],#1
00001c  f7fffffe          BL       LCD_write
                  |L39.32|
000020  7820              LDRB     r0,[r4,#0]            ;1651
000022  2800              CMP      r0,#0                 ;1651
000024  d1f8              BNE      |L39.24|
;;;1654   	}
;;;1655   }
000026  bd70              POP      {r4-r6,pc}
;;;1656   
                          ENDP


                          AREA ||i.LCD_text_color||, CODE, READONLY, ALIGN=1

                  LCD_text_color PROC
;;;1640   
;;;1641   void LCD_text_color(u16 x, u16 y, const char *text, u16 word_color, u16 back_color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;1643   	LCD_setTextColor(word_color, back_color);
000010  4641              MOV      r1,r8
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       LCD_setTextColor
;;;1644   	LCD_text(text, x, y);
000018  462a              MOV      r2,r5
00001a  4621              MOV      r1,r4
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       LCD_text
;;;1645   }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;1646   
                          ENDP


                          AREA ||i.LCD_write||, CODE, READONLY, ALIGN=2

                  LCD_write PROC
;;;1552   
;;;1553   void LCD_write(char c)
000000  b51c              PUSH     {r2-r4,lr}
;;;1554   {
000002  4604              MOV      r4,r0
;;;1555   	if (c == '\n') {
000004  2c0a              CMP      r4,#0xa
000006  d10b              BNE      |L41.32|
;;;1556   		cursor_y += textsize * 8;
000008  4820              LDR      r0,|L41.140|
00000a  7800              LDRB     r0,[r0,#0]  ; textsize
00000c  4920              LDR      r1,|L41.144|
00000e  8809              LDRH     r1,[r1,#0]  ; cursor_y
000010  eb0100c0          ADD      r0,r1,r0,LSL #3
000014  491e              LDR      r1,|L41.144|
000016  8008              STRH     r0,[r1,#0]
;;;1557   		cursor_x = 0;
000018  2000              MOVS     r0,#0
00001a  491e              LDR      r1,|L41.148|
00001c  8008              STRH     r0,[r1,#0]
00001e  e034              B        |L41.138|
                  |L41.32|
;;;1558   	}
;;;1559   	else if (c == '\r') {
000020  2c0d              CMP      r4,#0xd
000022  d032              BEQ      |L41.138|
;;;1560   		// skip em
;;;1561   	}
;;;1562   	else {
;;;1563   		LCD_DrawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
000024  4819              LDR      r0,|L41.140|
000026  7800              LDRB     r0,[r0,#0]  ; textsize
000028  491b              LDR      r1,|L41.152|
00002a  8809              LDRH     r1,[r1,#0]  ; textbgcolor
00002c  e9cd1000          STRD     r1,r0,[sp,#0]
000030  481a              LDR      r0,|L41.156|
000032  8803              LDRH     r3,[r0,#0]  ; textcolor
000034  4622              MOV      r2,r4
000036  4816              LDR      r0,|L41.144|
000038  8801              LDRH     r1,[r0,#0]  ; cursor_y
00003a  4816              LDR      r0,|L41.148|
00003c  8800              LDRH     r0,[r0,#0]  ; cursor_x
00003e  f7fffffe          BL       LCD_DrawChar
;;;1564   		cursor_x += textsize * 6;
000042  4812              LDR      r0,|L41.140|
000044  7800              LDRB     r0,[r0,#0]  ; textsize
000046  eb000040          ADD      r0,r0,r0,LSL #1
00004a  4912              LDR      r1,|L41.148|
00004c  8809              LDRH     r1,[r1,#0]  ; cursor_x
00004e  eb010040          ADD      r0,r1,r0,LSL #1
000052  4910              LDR      r1,|L41.148|
000054  8008              STRH     r0,[r1,#0]
;;;1565   		if (wrap && (cursor_x > (lcddev.max_width - textsize * 6))) {
000056  4812              LDR      r0,|L41.160|
000058  7800              LDRB     r0,[r0,#0]  ; wrap
00005a  b1b0              CBZ      r0,|L41.138|
00005c  4811              LDR      r0,|L41.164|
00005e  8900              LDRH     r0,[r0,#8]  ; lcddev
000060  490a              LDR      r1,|L41.140|
000062  7809              LDRB     r1,[r1,#0]  ; textsize
000064  eb010141          ADD      r1,r1,r1,LSL #1
000068  eba00041          SUB      r0,r0,r1,LSL #1
00006c  4909              LDR      r1,|L41.148|
00006e  8809              LDRH     r1,[r1,#0]  ; cursor_x
000070  4288              CMP      r0,r1
000072  da0a              BGE      |L41.138|
;;;1566   			cursor_y += textsize * 8;
000074  4805              LDR      r0,|L41.140|
000076  7800              LDRB     r0,[r0,#0]  ; textsize
000078  4905              LDR      r1,|L41.144|
00007a  8809              LDRH     r1,[r1,#0]  ; cursor_y
00007c  eb0100c0          ADD      r0,r1,r0,LSL #3
000080  4903              LDR      r1,|L41.144|
000082  8008              STRH     r0,[r1,#0]
;;;1567   			cursor_x = 0;
000084  2000              MOVS     r0,#0
000086  4903              LDR      r1,|L41.148|
000088  8008              STRH     r0,[r1,#0]
                  |L41.138|
;;;1568   		}
;;;1569   	}
;;;1570   }
00008a  bd1c              POP      {r2-r4,pc}
;;;1571   
                          ENDP

                  |L41.140|
                          DCD      textsize
                  |L41.144|
                          DCD      cursor_y
                  |L41.148|
                          DCD      cursor_x
                  |L41.152|
                          DCD      textbgcolor
                  |L41.156|
                          DCD      textcolor
                  |L41.160|
                          DCD      wrap
                  |L41.164|
                          DCD      lcddev

                          AREA ||i.display_char_ascii||, CODE, READONLY, ALIGN=1

                  display_char_ascii PROC
;;;1384   
;;;1385   void display_char_ascii(u16 x, u16 y, char text, u8 size, u16 word_color, u16 back_color)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1386   {
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
00000c  461c              MOV      r4,r3
00000e  e9dd960c          LDRD     r9,r6,[sp,#0x30]
;;;1387   	if ((text >= 0x20) && (text <= 0x7e))
000012  2d20              CMP      r5,#0x20
000014  db1f              BLT      |L42.86|
000016  2d7e              CMP      r5,#0x7e
000018  dc1d              BGT      |L42.86|
;;;1388   	{
;;;1389   		if (size == 1)
00001a  2c01              CMP      r4,#1
00001c  d10a              BNE      |L42.52|
;;;1390   		{
;;;1391   			u8 fontbuf[6] = { 0 };
00001e  2000              MOVS     r0,#0
000020  9003              STR      r0,[sp,#0xc]
000022  9004              STR      r0,[sp,#0x10]
;;;1392   			//get_font(text, fontbuf);
;;;1393   			//font_ascii_h(fontbuf, text, size);
;;;1394   			display_graphic_5x7(x, y, fontbuf, word_color, back_color);//显示5x7的ASCII字到LCD上
000024  464b              MOV      r3,r9
000026  aa03              ADD      r2,sp,#0xc
000028  4641              MOV      r1,r8
00002a  4638              MOV      r0,r7
00002c  9600              STR      r6,[sp,#0]
00002e  f7fffffe          BL       display_graphic_5x7
;;;1395   		}
000032  e010              B        |L42.86|
                  |L42.52|
;;;1396   		else if ((size == 3) || (size == 4))
000034  2c03              CMP      r4,#3
000036  d001              BEQ      |L42.60|
000038  2c04              CMP      r4,#4
00003a  d10c              BNE      |L42.86|
                  |L42.60|
;;;1397   		{
;;;1398   			u8 fontbuf[16] = { 0 };
00003c  2000              MOVS     r0,#0
00003e  9001              STR      r0,[sp,#4]
000040  9002              STR      r0,[sp,#8]
000042  9003              STR      r0,[sp,#0xc]
000044  9004              STR      r0,[sp,#0x10]
;;;1399   			//font_ascii_h(fontbuf, text, size);
;;;1400   			display_graphic_8x16(x, y, fontbuf, word_color, back_color);//显示8x16的ASCII字到LCD上
000046  464b              MOV      r3,r9
000048  aa01              ADD      r2,sp,#4
00004a  4641              MOV      r1,r8
00004c  4638              MOV      r0,r7
00004e  9600              STR      r6,[sp,#0]
000050  f7fffffe          BL       display_graphic_8x16
;;;1401   		}
000054  bf00              NOP      
                  |L42.86|
;;;1402   	}
;;;1403   }
000056  b005              ADD      sp,sp,#0x14
000058  e8bd83f0          POP      {r4-r9,pc}
;;;1404   
                          ENDP


                          AREA ||i.display_graphic_16x16||, CODE, READONLY, ALIGN=1

                  display_graphic_16x16 PROC
;;;1244   /*显示16x16点阵图像、汉字、生僻字或16x16点阵的其他图标*/
;;;1245   void display_graphic_16x16(u16 x, u16 y, u8 *dp, u16 word_color, u16 back_color)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1246   {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1247   	u8 i, j, k;
;;;1248   
;;;1249   	for (k = 0; k < 2; k++)
000010  2700              MOVS     r7,#0
000012  e02e              B        |L43.114|
                  |L43.20|
;;;1250   	{
;;;1251   		for (j = 0; j < 8; j++)
000014  2500              MOVS     r5,#0
000016  e027              B        |L43.104|
                  |L43.24|
;;;1252   		{
;;;1253   			//lcd_set_window(x, y + k * 8 + j, x + 15, y + 15);
;;;1254   			for (i = 0; i < 16; i++)
000018  2600              MOVS     r6,#0
00001a  e020              B        |L43.94|
                  |L43.28|
;;;1255   			{
;;;1256   				if ((*dp++) & (0x01 << j))		/*写数据到LCD,每写完一个8位的数据后列地址自动加1*/
00001c  f8140b01          LDRB     r0,[r4],#1
000020  2101              MOVS     r1,#1
000022  40a9              LSLS     r1,r1,r5
000024  4008              ANDS     r0,r0,r1
000026  b160              CBZ      r0,|L43.66|
;;;1257   					LCD_DrawPixel(x+i, y+j+8*k, word_color);
000028  eb090205          ADD      r2,r9,r5
00002c  2308              MOVS     r3,#8
00002e  fb032207          MLA      r2,r3,r7,r2
000032  b291              UXTH     r1,r2
000034  eb080206          ADD      r2,r8,r6
000038  b290              UXTH     r0,r2
00003a  4652              MOV      r2,r10
00003c  f7fffffe          BL       LCD_DrawPixel
000040  e00b              B        |L43.90|
                  |L43.66|
;;;1258   					//LCD_WR_16Bit(word_color);
;;;1259   				else
;;;1260   					LCD_DrawPixel(x+i, y+j+8*k, back_color);
000042  eb090205          ADD      r2,r9,r5
000046  2308              MOVS     r3,#8
000048  fb032207          MLA      r2,r3,r7,r2
00004c  b291              UXTH     r1,r2
00004e  eb080206          ADD      r2,r8,r6
000052  b290              UXTH     r0,r2
000054  465a              MOV      r2,r11
000056  f7fffffe          BL       LCD_DrawPixel
                  |L43.90|
00005a  1c70              ADDS     r0,r6,#1              ;1254
00005c  b2c6              UXTB     r6,r0                 ;1254
                  |L43.94|
00005e  2e10              CMP      r6,#0x10              ;1254
000060  dbdc              BLT      |L43.28|
;;;1261   					//LCD_WR_16Bit(back_color);
;;;1262   			}
;;;1263   			dp -= 16;
000062  3c10              SUBS     r4,r4,#0x10
000064  1c68              ADDS     r0,r5,#1              ;1251
000066  b2c5              UXTB     r5,r0                 ;1251
                  |L43.104|
000068  2d08              CMP      r5,#8                 ;1251
00006a  dbd5              BLT      |L43.24|
;;;1264   		}
;;;1265   		dp += 16;
00006c  3410              ADDS     r4,r4,#0x10
00006e  1c78              ADDS     r0,r7,#1              ;1249
000070  b2c7              UXTB     r7,r0                 ;1249
                  |L43.114|
000072  2f02              CMP      r7,#2                 ;1249
000074  dbce              BLT      |L43.20|
;;;1266   	}
;;;1267   }
000076  e8bd9ff0          POP      {r4-r12,pc}
;;;1268   
                          ENDP


                          AREA ||i.display_graphic_32x32||, CODE, READONLY, ALIGN=1

                  display_graphic_32x32 PROC
;;;1269   /*显示32x32点阵图像、汉字、生僻字或32x32点阵的其他图标*/
;;;1270   void display_graphic_32x32(u16 x, u16 y, u8 *dp, u16 word_color, u16 back_color)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1271   {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1272   	u8 i, j, k;
;;;1273   
;;;1274   	for (k = 0; k < 4; k++)
000010  2700              MOVS     r7,#0
000012  e02e              B        |L44.114|
                  |L44.20|
;;;1275   	{
;;;1276   		for (j = 0; j < 8; j++)
000014  2500              MOVS     r5,#0
000016  e027              B        |L44.104|
                  |L44.24|
;;;1277   		{
;;;1278   			//lcd_set_window(x, y + k * 8 + j, x + 31, y + 31);
;;;1279   			for (i = 0; i < 32; i++)
000018  2600              MOVS     r6,#0
00001a  e020              B        |L44.94|
                  |L44.28|
;;;1280   			{
;;;1281   				if ((*dp++) & (0x01 << j))		/*写数据到LCD,每写完一个8位的数据后列地址自动加1*/
00001c  f8140b01          LDRB     r0,[r4],#1
000020  2101              MOVS     r1,#1
000022  40a9              LSLS     r1,r1,r5
000024  4008              ANDS     r0,r0,r1
000026  b160              CBZ      r0,|L44.66|
;;;1282   					LCD_DrawPixel(x+i, y+j+8*k, word_color);
000028  eb090205          ADD      r2,r9,r5
00002c  2308              MOVS     r3,#8
00002e  fb032207          MLA      r2,r3,r7,r2
000032  b291              UXTH     r1,r2
000034  eb080206          ADD      r2,r8,r6
000038  b290              UXTH     r0,r2
00003a  4652              MOV      r2,r10
00003c  f7fffffe          BL       LCD_DrawPixel
000040  e00b              B        |L44.90|
                  |L44.66|
;;;1283   					//LCD_WR_16Bit(word_color);
;;;1284   				else
;;;1285   					LCD_DrawPixel(x+i, y+j+8*k, back_color);
000042  eb090205          ADD      r2,r9,r5
000046  2308              MOVS     r3,#8
000048  fb032207          MLA      r2,r3,r7,r2
00004c  b291              UXTH     r1,r2
00004e  eb080206          ADD      r2,r8,r6
000052  b290              UXTH     r0,r2
000054  465a              MOV      r2,r11
000056  f7fffffe          BL       LCD_DrawPixel
                  |L44.90|
00005a  1c70              ADDS     r0,r6,#1              ;1279
00005c  b2c6              UXTB     r6,r0                 ;1279
                  |L44.94|
00005e  2e20              CMP      r6,#0x20              ;1279
000060  dbdc              BLT      |L44.28|
;;;1286   					//LCD_WR_16Bit(back_color);
;;;1287   			}
;;;1288   			dp -= 32;
000062  3c20              SUBS     r4,r4,#0x20
000064  1c68              ADDS     r0,r5,#1              ;1276
000066  b2c5              UXTB     r5,r0                 ;1276
                  |L44.104|
000068  2d08              CMP      r5,#8                 ;1276
00006a  dbd5              BLT      |L44.24|
;;;1289   		}
;;;1290   		dp += 32;
00006c  3420              ADDS     r4,r4,#0x20
00006e  1c78              ADDS     r0,r7,#1              ;1274
000070  b2c7              UXTB     r7,r0                 ;1274
                  |L44.114|
000072  2f04              CMP      r7,#4                 ;1274
000074  dbce              BLT      |L44.20|
;;;1291   	}
;;;1292   }
000076  e8bd9ff0          POP      {r4-r12,pc}
;;;1293   
                          ENDP


                          AREA ||i.display_graphic_48x48||, CODE, READONLY, ALIGN=1

                  display_graphic_48x48 PROC
;;;1294   /*显示48x48点阵图像、汉字、生僻字或48x48点阵的其他图标*/
;;;1295   void display_graphic_48x48(u16 x, u16 y, u8 *dp, u16 word_color, u16 back_color)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1296   {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1297   	u8 i, j, k;
;;;1298   
;;;1299   	for (k = 0; k < 6; k++)
000010  2500              MOVS     r5,#0
000012  e03d              B        |L45.144|
                  |L45.20|
;;;1300   	{
;;;1301   		for (j = 0; j < 8; j++)
000014  2400              MOVS     r4,#0
000016  e036              B        |L45.134|
                  |L45.24|
;;;1302   		{
;;;1303   			lcd_set_window(x, y + k * 8 + j, x + 47, y + 47);
000018  f106002f          ADD      r0,r6,#0x2f
00001c  b283              UXTH     r3,r0
00001e  f108002f          ADD      r0,r8,#0x2f
000022  b282              UXTH     r2,r0
000024  eb0600c5          ADD      r0,r6,r5,LSL #3
000028  4420              ADD      r0,r0,r4
00002a  b281              UXTH     r1,r0
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       lcd_set_window
;;;1304   			for (i = 0; i < 48; i++)
000032  f04f0900          MOV      r9,#0
000036  e020              B        |L45.122|
                  |L45.56|
;;;1305   			{
;;;1306   				if ((*dp++) & (0x01 << j))		/*写数据到LCD,每写完一个8位的数据后列地址自动加1*/
000038  f8170b01          LDRB     r0,[r7],#1
00003c  2101              MOVS     r1,#1
00003e  40a1              LSLS     r1,r1,r4
000040  4008              ANDS     r0,r0,r1
000042  b158              CBZ      r0,|L45.92|
;;;1307   					LCD_DrawPixel(x+i, y+j+8*k, word_color);
000044  1932              ADDS     r2,r6,r4
000046  2308              MOVS     r3,#8
000048  fb032205          MLA      r2,r3,r5,r2
00004c  b291              UXTH     r1,r2
00004e  eb080209          ADD      r2,r8,r9
000052  b290              UXTH     r0,r2
000054  4652              MOV      r2,r10
000056  f7fffffe          BL       LCD_DrawPixel
00005a  e00a              B        |L45.114|
                  |L45.92|
;;;1308   					//LCD_WR_16Bit(word_color);
;;;1309   				else
;;;1310   					LCD_DrawPixel(x+i, y+j+8*k, back_color);
00005c  1932              ADDS     r2,r6,r4
00005e  2308              MOVS     r3,#8
000060  fb032205          MLA      r2,r3,r5,r2
000064  b291              UXTH     r1,r2
000066  eb080209          ADD      r2,r8,r9
00006a  b290              UXTH     r0,r2
00006c  465a              MOV      r2,r11
00006e  f7fffffe          BL       LCD_DrawPixel
                  |L45.114|
000072  f1090001          ADD      r0,r9,#1              ;1304
000076  f00009ff          AND      r9,r0,#0xff           ;1304
                  |L45.122|
00007a  f1b90f30          CMP      r9,#0x30              ;1304
00007e  dbdb              BLT      |L45.56|
;;;1311   					//LCD_WR_16Bit(back_color);
;;;1312   			}
;;;1313   			dp -= 48;
000080  3f30              SUBS     r7,r7,#0x30
000082  1c60              ADDS     r0,r4,#1              ;1301
000084  b2c4              UXTB     r4,r0                 ;1301
                  |L45.134|
000086  2c08              CMP      r4,#8                 ;1301
000088  dbc6              BLT      |L45.24|
;;;1314   		}
;;;1315   		dp += 48;
00008a  3730              ADDS     r7,r7,#0x30
00008c  1c68              ADDS     r0,r5,#1              ;1299
00008e  b2c5              UXTB     r5,r0                 ;1299
                  |L45.144|
000090  2d06              CMP      r5,#6                 ;1299
000092  dbbf              BLT      |L45.20|
;;;1316   	}
;;;1317   }
000094  e8bd9ff0          POP      {r4-r12,pc}
;;;1318   
                          ENDP


                          AREA ||i.display_graphic_5x7||, CODE, READONLY, ALIGN=1

                  display_graphic_5x7 PROC
;;;1197   //x，y为坐标，*dp为字体，word_color为字体颜色，back_color为背景颜色
;;;1198   void display_graphic_5x7(u16 x, u16 y, u8 *dp, u16 word_color, u16 back_color)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1199   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;1200   	u8 i, j;
;;;1201   
;;;1202   	for (j = 0; j < 8; j++)
000010  2400              MOVS     r4,#0
000012  e01f              B        |L46.84|
                  |L46.20|
;;;1203   	{
;;;1204   		//lcd_set_window(x, y + j, x + 5, y + 7);
;;;1205   		for (i = 0; i < 6; i++)
000014  2600              MOVS     r6,#0
000016  e018              B        |L46.74|
                  |L46.24|
;;;1206   		{
;;;1207   			if ((*dp++) & (0x01 << j))		/*写数据到LCD,每写完一个6位的数据后列地址自动加1*/
000018  f8150b01          LDRB     r0,[r5],#1
00001c  2101              MOVS     r1,#1
00001e  40a1              LSLS     r1,r1,r4
000020  4008              ANDS     r0,r0,r1
000022  b140              CBZ      r0,|L46.54|
;;;1208   				LCD_DrawPixel(x+i, y+j, word_color);
000024  eb080204          ADD      r2,r8,r4
000028  b291              UXTH     r1,r2
00002a  19ba              ADDS     r2,r7,r6
00002c  b290              UXTH     r0,r2
00002e  464a              MOV      r2,r9
000030  f7fffffe          BL       LCD_DrawPixel
000034  e007              B        |L46.70|
                  |L46.54|
;;;1209   				//LCD_WR_16Bit(word_color);
;;;1210   			else
;;;1211   				LCD_DrawPixel(x+i, y+j, back_color);
000036  eb080204          ADD      r2,r8,r4
00003a  b291              UXTH     r1,r2
00003c  19ba              ADDS     r2,r7,r6
00003e  b290              UXTH     r0,r2
000040  4652              MOV      r2,r10
000042  f7fffffe          BL       LCD_DrawPixel
                  |L46.70|
000046  1c70              ADDS     r0,r6,#1              ;1205
000048  b2c6              UXTB     r6,r0                 ;1205
                  |L46.74|
00004a  2e06              CMP      r6,#6                 ;1205
00004c  dbe4              BLT      |L46.24|
;;;1212   				//LCD_WR_16Bit(back_color);
;;;1213   		}
;;;1214   		dp -= 6;
00004e  1fad              SUBS     r5,r5,#6
000050  1c60              ADDS     r0,r4,#1              ;1202
000052  b2c4              UXTB     r4,r0                 ;1202
                  |L46.84|
000054  2c08              CMP      r4,#8                 ;1202
000056  dbdd              BLT      |L46.20|
;;;1215   	}
;;;1216   }
000058  e8bd87f0          POP      {r4-r10,pc}
;;;1217   
                          ENDP


                          AREA ||i.display_graphic_8x16||, CODE, READONLY, ALIGN=1

                  display_graphic_8x16 PROC
;;;1219   //x，y为坐标，*dp为字体，word_color为字体颜色，back_color为背景颜色
;;;1220   void display_graphic_8x16(u16 x, u16 y, u8 *dp, u16 word_color, u16 back_color)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1221   {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1222   	u8 i, j, k;
;;;1223   
;;;1224   	for (k = 0; k < 2; k++)
000010  2700              MOVS     r7,#0
000012  e02e              B        |L47.114|
                  |L47.20|
;;;1225   	{
;;;1226   		for (j = 0; j < 8; j++)
000014  2500              MOVS     r5,#0
000016  e027              B        |L47.104|
                  |L47.24|
;;;1227   		{
;;;1228   			//lcd_set_window(x, y + k * 8 + j, x + 7, y + 15);
;;;1229   			for (i = 0; i < 8; i++)
000018  2600              MOVS     r6,#0
00001a  e020              B        |L47.94|
                  |L47.28|
;;;1230   			{
;;;1231   				if ((*dp++) & (0x01 << j))		/*写数据到LCD,每写完一个8位的数据后列地址自动加1*/
00001c  f8140b01          LDRB     r0,[r4],#1
000020  2101              MOVS     r1,#1
000022  40a9              LSLS     r1,r1,r5
000024  4008              ANDS     r0,r0,r1
000026  b160              CBZ      r0,|L47.66|
;;;1232   					LCD_DrawPixel(x+i, y+j+8*k, word_color);
000028  eb090205          ADD      r2,r9,r5
00002c  2308              MOVS     r3,#8
00002e  fb032207          MLA      r2,r3,r7,r2
000032  b291              UXTH     r1,r2
000034  eb080206          ADD      r2,r8,r6
000038  b290              UXTH     r0,r2
00003a  4652              MOV      r2,r10
00003c  f7fffffe          BL       LCD_DrawPixel
000040  e00b              B        |L47.90|
                  |L47.66|
;;;1233   					//LCD_WR_16Bit(word_color);
;;;1234   				else
;;;1235   					LCD_DrawPixel(x+i, y+j+8*k, back_color);
000042  eb090205          ADD      r2,r9,r5
000046  2308              MOVS     r3,#8
000048  fb032207          MLA      r2,r3,r7,r2
00004c  b291              UXTH     r1,r2
00004e  eb080206          ADD      r2,r8,r6
000052  b290              UXTH     r0,r2
000054  465a              MOV      r2,r11
000056  f7fffffe          BL       LCD_DrawPixel
                  |L47.90|
00005a  1c70              ADDS     r0,r6,#1              ;1229
00005c  b2c6              UXTB     r6,r0                 ;1229
                  |L47.94|
00005e  2e08              CMP      r6,#8                 ;1229
000060  dbdc              BLT      |L47.28|
;;;1236   					//LCD_WR_16Bit(back_color);
;;;1237   			}
;;;1238   			dp -= 8;
000062  3c08              SUBS     r4,r4,#8
000064  1c68              ADDS     r0,r5,#1              ;1226
000066  b2c5              UXTB     r5,r0                 ;1226
                  |L47.104|
000068  2d08              CMP      r5,#8                 ;1226
00006a  dbd5              BLT      |L47.24|
;;;1239   		}
;;;1240   		dp += 8;
00006c  3408              ADDS     r4,r4,#8
00006e  1c78              ADDS     r0,r7,#1              ;1224
000070  b2c7              UXTB     r7,r0                 ;1224
                  |L47.114|
000072  2f02              CMP      r7,#2                 ;1224
000074  dbce              BLT      |L47.20|
;;;1241   	}
;;;1242   }
000076  e8bd9ff0          POP      {r4-r12,pc}
;;;1243   
                          ENDP


                          AREA ||i.display_num||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  display_num PROC
;;;1429   //范围0-4294967295
;;;1430   void display_num(u16 x, u16 y, u32 num, u8 size, u16 word_color, u16 back_color)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1431   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;1432   	char tem[10];
;;;1433   	sprintf(tem, "%u", num);
000012  4632              MOV      r2,r6
000014  a107              ADR      r1,|L48.52|
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       __2sprintf
;;;1434   	display_string_ascii(x, y, tem, size, word_color, back_color);
00001c  463b              MOV      r3,r7
00001e  aa02              ADD      r2,sp,#8
000020  4629              MOV      r1,r5
000022  4620              MOV      r0,r4
000024  e9cd8900          STRD     r8,r9,[sp,#0]
000028  f7fffffe          BL       display_string_ascii
;;;1435   }
00002c  b005              ADD      sp,sp,#0x14
00002e  e8bd83f0          POP      {r4-r9,pc}
;;;1436   
                          ENDP

000032  0000              DCW      0x0000
                  |L48.52|
000034  257500            DCB      "%u",0
000037  00                DCB      0

                          AREA ||i.display_num_format||, CODE, READONLY, ALIGN=1

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_truncate_unsigned
                          REQUIRE _printf_truncate_signed
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_i
                          REQUIRE _printf_u
                          REQUIRE _printf_o
                          REQUIRE _printf_x
                          REQUIRE _printf_c
                          REQUIRE _printf_lc
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_oct
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_wctomb
                  display_num_format PROC
;;;1438   
;;;1439   void display_num_format(u16 x, u16 y, u32 num, u8 size, char * format, u16 word_color, u16 back_color)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1440   {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
000012  f8dd8038          LDR      r8,[sp,#0x38]
;;;1441   	char tem[10];
;;;1442   	sprintf(tem, format, num);
000016  4632              MOV      r2,r6
000018  4641              MOV      r1,r8
00001a  a803              ADD      r0,sp,#0xc
00001c  f7fffffe          BL       __2sprintf
;;;1443   	display_string_ascii(x, y, tem, size, word_color, back_color);
000020  463b              MOV      r3,r7
000022  aa03              ADD      r2,sp,#0xc
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  e9cd9a00          STRD     r9,r10,[sp,#0]
00002c  f7fffffe          BL       display_string_ascii
;;;1444   }
000030  b006              ADD      sp,sp,#0x18
000032  e8bd87f0          POP      {r4-r10,pc}
;;;1445   
                          ENDP


                          AREA ||i.display_qrcode||, CODE, READONLY, ALIGN=1

                  display_qrcode PROC
;;;1667   
;;;1668   void display_qrcode(u16 x_offset, u16 y_offset, const char *data, u8 size, u16 bg)
000000  b510              PUSH     {r4,lr}
;;;1669   {
000002  9c02              LDR      r4,[sp,#8]
;;;1670   //	QRCode qrcode;
;;;1671   //	uint8_t qrcodeData[qrcode_getBufferSize(3)];
;;;1672   
;;;1673   //	qrcode_initText(&qrcode, qrcodeData, 3, ECC_HIGH, data);
;;;1674   
;;;1675   //	LCD_DrawBox(x_offset, y_offset, qrcode.size*size, qrcode.size*size, WHITE);
;;;1676   //	for (uint8_t y = 0; y < qrcode.size; y++)
;;;1677   //	{
;;;1678   //		for (uint8_t x = 0; x < qrcode.size; x++) 
;;;1679   //		{
;;;1680   //			if (qrcode_getModule(&qrcode, x, y)) 
;;;1681   //			{
;;;1682   //				//tft.drawPixel(x_offset + x, y_offset + y, ST7735_BLACK);
;;;1683   //				//LCD_DrawPixel(x_offset + (x * 2), y_offset + (y * 2), BLACK);
;;;1684   //				//LCD_DrawPixel(x_offset + (x * 2) + 1, y_offset + (y * 2), BLACK);
;;;1685   //				//LCD_DrawPixel(x_offset + (x * 2) + 1, y_offset + (y * 2) + 1, BLACK);
;;;1686   //				//LCD_DrawPixel(x_offset + (x * 2), y_offset + (y * 2) + 1, BLACK);
;;;1687   //				LCD_DrawBox(x_offset + x * size, y_offset + y * size, size, size, bg);
;;;1688   //			}
;;;1689   //		}
;;;1690   //	}
;;;1691   }
000004  bd10              POP      {r4,pc}
;;;1692   
                          ENDP


                          AREA ||i.display_string_GB2312||, CODE, READONLY, ALIGN=1

                  display_string_GB2312 PROC
;;;1529   //显示GB2312汉字及字符
;;;1530   void display_string_GB2312(u16 x, u16 y,const char *text, u16 word_color, u16 back_color)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1531   {
000004  b089              SUB      sp,sp,#0x24
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
00000c  4699              MOV      r9,r3
00000e  9f10              LDR      r7,[sp,#0x40]
;;;1532   	u8 i = 0;
000010  2400              MOVS     r4,#0
;;;1533   	u8 fontbuf[32] = { 0 };
000012  2120              MOVS     r1,#0x20
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       __aeabi_memclr4
;;;1534   	while ((text[i] > 0x00))
00001a  e01e              B        |L51.90|
                  |L51.28|
;;;1535   	{
;;;1536   		if ((text[i] >= 0x20) && (text[i] <= 0x7e))
00001c  5d28              LDRB     r0,[r5,r4]
00001e  2820              CMP      r0,#0x20
000020  db0f              BLT      |L51.66|
000022  5d28              LDRB     r0,[r5,r4]
000024  287e              CMP      r0,#0x7e
000026  dc0c              BGT      |L51.66|
;;;1537   		{
;;;1538   			//font_ascii_h(fontbuf, text[i], 4);
;;;1539   			display_graphic_8x16(x, y, fontbuf, word_color, back_color);
000028  464b              MOV      r3,r9
00002a  aa01              ADD      r2,sp,#4
00002c  4641              MOV      r1,r8
00002e  4630              MOV      r0,r6
000030  9700              STR      r7,[sp,#0]
000032  f7fffffe          BL       display_graphic_8x16
;;;1540   			i++;
000036  1c60              ADDS     r0,r4,#1
000038  b2c4              UXTB     r4,r0
;;;1541   			x += 8;
00003a  f1060008          ADD      r0,r6,#8
00003e  b286              UXTH     r6,r0
000040  e00b              B        |L51.90|
                  |L51.66|
;;;1542   		}
;;;1543   		else
;;;1544   		{
;;;1545   			//font_gb2312_h(fontbuf, text[i], text[i + 1]);
;;;1546   			display_graphic_16x16(x, y, fontbuf, word_color, back_color);
000042  464b              MOV      r3,r9
000044  aa01              ADD      r2,sp,#4
000046  4641              MOV      r1,r8
000048  4630              MOV      r0,r6
00004a  9700              STR      r7,[sp,#0]
00004c  f7fffffe          BL       display_graphic_16x16
;;;1547   			i += 2;
000050  1ca0              ADDS     r0,r4,#2
000052  b2c4              UXTB     r4,r0
;;;1548   			x += 16;
000054  f1060010          ADD      r0,r6,#0x10
000058  b286              UXTH     r6,r0
                  |L51.90|
00005a  5d28              LDRB     r0,[r5,r4]            ;1534
00005c  2800              CMP      r0,#0                 ;1534
00005e  dcdd              BGT      |L51.28|
;;;1549   		}
;;;1550   	}
;;;1551   }
000060  b009              ADD      sp,sp,#0x24
000062  e8bd83f0          POP      {r4-r9,pc}
;;;1552   
                          ENDP


                          AREA ||i.display_string_ascii||, CODE, READONLY, ALIGN=1

                  display_string_ascii PROC
;;;1404   
;;;1405   void display_string_ascii(u16 x, u16 y, const char *text, u8 size, u16 word_color, u16 back_color)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1406   {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9a0a          LDRD     r9,r10,[sp,#0x28]
;;;1407   	u8 x_num;
;;;1408   	switch (size)
000010  2f01              CMP      r7,#1
000012  d004              BEQ      |L52.30|
000014  2f03              CMP      r7,#3
000016  d004              BEQ      |L52.34|
000018  2f04              CMP      r7,#4
00001a  d106              BNE      |L52.42|
00001c  e003              B        |L52.38|
                  |L52.30|
;;;1409   	{
;;;1410   	case 1:
;;;1411   		x_num = 6;
00001e  2506              MOVS     r5,#6
;;;1412   		break;
000020  e003              B        |L52.42|
                  |L52.34|
;;;1413   	case 3:
;;;1414   		x_num = 8;
000022  2508              MOVS     r5,#8
;;;1415   		break;
000024  e001              B        |L52.42|
                  |L52.38|
;;;1416   	case 4:
;;;1417   		x_num = 8;
000026  2508              MOVS     r5,#8
;;;1418   		break;
000028  bf00              NOP      
                  |L52.42|
00002a  bf00              NOP                            ;1412
;;;1419   	}
;;;1420   	while (*text)
00002c  e00b              B        |L52.70|
                  |L52.46|
;;;1421   	{
;;;1422   		//display_char_ascii(x, y, *text++, size, word_color, back_color);
;;;1423   		LCD_DrawChar(x, y, *text++, word_color, back_color, 1);
00002e  2001              MOVS     r0,#1
000030  e9cda000          STRD     r10,r0,[sp,#0]
000034  f8142b01          LDRB     r2,[r4],#1
000038  464b              MOV      r3,r9
00003a  4641              MOV      r1,r8
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       LCD_DrawChar
;;;1424   		x += x_num;
000042  1970              ADDS     r0,r6,r5
000044  b286              UXTH     r6,r0
                  |L52.70|
000046  7820              LDRB     r0,[r4,#0]            ;1420
000048  2800              CMP      r0,#0                 ;1420
00004a  d1f0              BNE      |L52.46|
;;;1425   	}
;;;1426   	//	lcd_set_window(lcddev.base_width, lcddev.base_height, lcddev.max_width - 1, lcddev.max_height - 1);//恢复窗口为全屏  
;;;1427   }
00004c  e8bd87fc          POP      {r2-r10,pc}
;;;1428   
                          ENDP


                          AREA ||i.lcd_cursor||, CODE, READONLY, ALIGN=2

                  lcd_cursor PROC
;;;843    *************************************************/
;;;844    void lcd_cursor(u16 Xpos, u16 Ypos)
000000  b570              PUSH     {r4-r6,lr}
;;;845    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;846    	//lcd_set_window(Xpos,Ypos,Xpos,Ypos);
;;;847    
;;;848    	Xpos = Xpos + lcddev.base_width + lcddev.move_width;
000006  4815              LDR      r0,|L53.92|
000008  8880              LDRH     r0,[r0,#4]  ; lcddev
00000a  4420              ADD      r0,r0,r4
00000c  4913              LDR      r1,|L53.92|
00000e  8989              LDRH     r1,[r1,#0xc]  ; lcddev
000010  4408              ADD      r0,r0,r1
000012  b284              UXTH     r4,r0
;;;849    	Ypos = Ypos + lcddev.base_height + lcddev.move_height;
000014  4811              LDR      r0,|L53.92|
000016  88c0              LDRH     r0,[r0,#6]  ; lcddev
000018  4428              ADD      r0,r0,r5
00001a  4910              LDR      r1,|L53.92|
00001c  89c9              LDRH     r1,[r1,#0xe]  ; lcddev
00001e  4408              ADD      r0,r0,r1
000020  b285              UXTH     r5,r0
;;;850    
;;;851    	LCD_WR(LCD_CMD, lcddev.setxcmd);
000022  480e              LDR      r0,|L53.92|
000024  7c81              LDRB     r1,[r0,#0x12]  ; lcddev
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       LCD_WR
;;;852    	LCD_WR(LCD_DATA, Xpos >> 8);
00002c  1221              ASRS     r1,r4,#8
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       LCD_WR
;;;853    	LCD_WR(LCD_DATA, 0xFF & Xpos);
000034  b2e1              UXTB     r1,r4
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       LCD_WR
;;;854    
;;;855    	LCD_WR(LCD_CMD, lcddev.setycmd);
00003c  4807              LDR      r0,|L53.92|
00003e  7d01              LDRB     r1,[r0,#0x14]  ; lcddev
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       LCD_WR
;;;856    	LCD_WR(LCD_DATA, Ypos >> 8);
000046  1229              ASRS     r1,r5,#8
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       LCD_WR
;;;857    	LCD_WR(LCD_DATA, 0xFF & Ypos);
00004e  b2e9              UXTB     r1,r5
000050  2001              MOVS     r0,#1
000052  f7fffffe          BL       LCD_WR
;;;858    
;;;859    	LCD_WR_GRAM();	//开始写入GRAM	
000056  f7fffffe          BL       LCD_WR_GRAM
;;;860    }
00005a  bd70              POP      {r4-r6,pc}
;;;861    
                          ENDP

                  |L53.92|
                          DCD      lcddev

                          AREA ||i.lcd_param||, CODE, READONLY, ALIGN=2

                  lcd_param PROC
;;;785    //方便进行横竖屏旋转模式切换
;;;786    void lcd_param(void)
000000  f2477035          MOV      r0,#0x7735
;;;787    {
;;;788    	lcddev.id = LCD_ID;
000004  4910              LDR      r1,|L54.72|
000006  8008              STRH     r0,[r1,#0]
;;;789    	lcddev.dir = 0;
000008  2000              MOVS     r0,#0
00000a  7088              STRB     r0,[r1,#2]
;;;790    
;;;791    	lcddev.base_width = LCD_BASE_WIDTH;
00000c  8088              STRH     r0,[r1,#4]
;;;792    	lcddev.base_height = LCD_BASE_HEIGHT;
00000e  80c8              STRH     r0,[r1,#6]
;;;793    	lcddev.max_width = LCD_MAX_WIDTH;
000010  2080              MOVS     r0,#0x80
000012  8108              STRH     r0,[r1,#8]
;;;794    	lcddev.max_height = LCD_MAX_HEIGHT;
000014  20a0              MOVS     r0,#0xa0
000016  8148              STRH     r0,[r1,#0xa]
;;;795    
;;;796    	lcddev.wramcmd = LCD_WRAM;
000018  202c              MOVS     r0,#0x2c
00001a  8208              STRH     r0,[r1,#0x10]
;;;797    	lcddev.setxcmd = LCD_SETX;
00001c  202a              MOVS     r0,#0x2a
00001e  8248              STRH     r0,[r1,#0x12]
;;;798    	lcddev.setycmd = LCD_SETY;
000020  202b              MOVS     r0,#0x2b
000022  8288              STRH     r0,[r1,#0x14]
;;;799    
;;;800    	cursor_x = 0;
000024  2000              MOVS     r0,#0
000026  4909              LDR      r1,|L54.76|
000028  8008              STRH     r0,[r1,#0]
;;;801    	cursor_y = 0;
00002a  4909              LDR      r1,|L54.80|
00002c  8008              STRH     r0,[r1,#0]
;;;802    	textsize = 1;
00002e  2001              MOVS     r0,#1
000030  4908              LDR      r1,|L54.84|
000032  7008              STRB     r0,[r1,#0]
;;;803    	textcolor = 0xFFFF;
000034  f64f70ff          MOV      r0,#0xffff
000038  4907              LDR      r1,|L54.88|
00003a  8008              STRH     r0,[r1,#0]
;;;804    	textbgcolor = 0xFFFF;
00003c  4907              LDR      r1,|L54.92|
00003e  8008              STRH     r0,[r1,#0]
;;;805    	wrap = TRUE;
000040  2001              MOVS     r0,#1
000042  4907              LDR      r1,|L54.96|
000044  7008              STRB     r0,[r1,#0]
;;;806    }
000046  4770              BX       lr
;;;807    
                          ENDP

                  |L54.72|
                          DCD      lcddev
                  |L54.76|
                          DCD      cursor_x
                  |L54.80|
                          DCD      cursor_y
                  |L54.84|
                          DCD      textsize
                  |L54.88|
                          DCD      textcolor
                  |L54.92|
                          DCD      textbgcolor
                  |L54.96|
                          DCD      wrap

                          AREA ||i.lcd_set_window||, CODE, READONLY, ALIGN=2

                  lcd_set_window PROC
;;;815    *************************************************/
;;;816    void lcd_set_window(u16 x, u16 y, u16 w, u16 h)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;817    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;818    	x = x + lcddev.base_width + lcddev.move_width;
00000c  4821              LDR      r0,|L55.148|
00000e  8880              LDRH     r0,[r0,#4]  ; lcddev
000010  4420              ADD      r0,r0,r4
000012  4920              LDR      r1,|L55.148|
000014  8989              LDRH     r1,[r1,#0xc]  ; lcddev
000016  4408              ADD      r0,r0,r1
000018  b284              UXTH     r4,r0
;;;819    	y = y + lcddev.base_height + lcddev.move_height;
00001a  481e              LDR      r0,|L55.148|
00001c  88c0              LDRH     r0,[r0,#6]  ; lcddev
00001e  4428              ADD      r0,r0,r5
000020  491c              LDR      r1,|L55.148|
000022  89c9              LDRH     r1,[r1,#0xe]  ; lcddev
000024  4408              ADD      r0,r0,r1
000026  b285              UXTH     r5,r0
;;;820    	w += lcddev.move_width;
000028  481a              LDR      r0,|L55.148|
00002a  8980              LDRH     r0,[r0,#0xc]  ; lcddev
00002c  4430              ADD      r0,r0,r6
00002e  b286              UXTH     r6,r0
;;;821    	h += lcddev.move_height;
000030  4818              LDR      r0,|L55.148|
000032  89c0              LDRH     r0,[r0,#0xe]  ; lcddev
000034  4438              ADD      r0,r0,r7
000036  b287              UXTH     r7,r0
;;;822    
;;;823    	LCD_WR(LCD_CMD, lcddev.setxcmd);
000038  4816              LDR      r0,|L55.148|
00003a  7c81              LDRB     r1,[r0,#0x12]  ; lcddev
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       LCD_WR
;;;824    	LCD_WR(LCD_DATA, x >> 8);
000042  1221              ASRS     r1,r4,#8
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       LCD_WR
;;;825    	LCD_WR(LCD_DATA, 0xFF & x);
00004a  b2e1              UXTB     r1,r4
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       LCD_WR
;;;826    	LCD_WR(LCD_DATA, w >> 8);
000052  1231              ASRS     r1,r6,#8
000054  2001              MOVS     r0,#1
000056  f7fffffe          BL       LCD_WR
;;;827    	LCD_WR(LCD_DATA, 0xFF & w);
00005a  b2f1              UXTB     r1,r6
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       LCD_WR
;;;828    
;;;829    	LCD_WR(LCD_CMD, lcddev.setycmd);
000062  480c              LDR      r0,|L55.148|
000064  7d01              LDRB     r1,[r0,#0x14]  ; lcddev
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       LCD_WR
;;;830    	LCD_WR(LCD_DATA, y >> 8);
00006c  1229              ASRS     r1,r5,#8
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       LCD_WR
;;;831    	LCD_WR(LCD_DATA, 0xFF & y);
000074  b2e9              UXTB     r1,r5
000076  2001              MOVS     r0,#1
000078  f7fffffe          BL       LCD_WR
;;;832    	LCD_WR(LCD_DATA, h >> 8);
00007c  1239              ASRS     r1,r7,#8
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       LCD_WR
;;;833    	LCD_WR(LCD_DATA, 0xFF & h);
000084  b2f9              UXTB     r1,r7
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       LCD_WR
;;;834    
;;;835    	LCD_WR_GRAM();	//开始写入GRAM		
00008c  f7fffffe          BL       LCD_WR_GRAM
;;;836    }
000090  e8bd81f0          POP      {r4-r8,pc}
;;;837    
                          ENDP

                  |L55.148|
                          DCD      lcddev

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  lcddev
                          %        22

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  font
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  003e5b4f          DCB      0x00,0x3e,0x5b,0x4f
000008  5b3e3e6b          DCB      0x5b,0x3e,0x3e,0x6b
00000c  4f6b3e1c          DCB      0x4f,0x6b,0x3e,0x1c
000010  3e7c3e1c          DCB      0x3e,0x7c,0x3e,0x1c
000014  183c7e3c          DCB      0x18,0x3c,0x7e,0x3c
000018  181c577d          DCB      0x18,0x1c,0x57,0x7d
00001c  571c1c5e          DCB      0x57,0x1c,0x1c,0x5e
000020  7f5e1c00          DCB      0x7f,0x5e,0x1c,0x00
000024  183c1800          DCB      0x18,0x3c,0x18,0x00
000028  ffe7c3e7          DCB      0xff,0xe7,0xc3,0xe7
00002c  ff001824          DCB      0xff,0x00,0x18,0x24
000030  1800ffe7          DCB      0x18,0x00,0xff,0xe7
000034  dbe7ff30          DCB      0xdb,0xe7,0xff,0x30
000038  483a060e          DCB      0x48,0x3a,0x06,0x0e
00003c  26297929          DCB      0x26,0x29,0x79,0x29
000040  26407f05          DCB      0x26,0x40,0x7f,0x05
000044  0507407f          DCB      0x05,0x07,0x40,0x7f
000048  05253f5a          DCB      0x05,0x25,0x3f,0x5a
00004c  3ce73c5a          DCB      0x3c,0xe7,0x3c,0x5a
000050  7f3e1c1c          DCB      0x7f,0x3e,0x1c,0x1c
000054  08081c1c          DCB      0x08,0x08,0x1c,0x1c
000058  3e7f1422          DCB      0x3e,0x7f,0x14,0x22
00005c  7f22145f          DCB      0x7f,0x22,0x14,0x5f
000060  5f005f5f          DCB      0x5f,0x00,0x5f,0x5f
000064  06097f01          DCB      0x06,0x09,0x7f,0x01
000068  7f006689          DCB      0x7f,0x00,0x66,0x89
00006c  956a6060          DCB      0x95,0x6a,0x60,0x60
000070  60606094          DCB      0x60,0x60,0x60,0x94
000074  a2ffa294          DCB      0xa2,0xff,0xa2,0x94
000078  08047e04          DCB      0x08,0x04,0x7e,0x04
00007c  0810207e          DCB      0x08,0x10,0x20,0x7e
000080  20100808          DCB      0x20,0x10,0x08,0x08
000084  2a1c0808          DCB      0x2a,0x1c,0x08,0x08
000088  1c2a0808          DCB      0x1c,0x2a,0x08,0x08
00008c  1e101010          DCB      0x1e,0x10,0x10,0x10
000090  100c1e0c          DCB      0x10,0x0c,0x1e,0x0c
000094  1e0c3038          DCB      0x1e,0x0c,0x30,0x38
000098  3e383006          DCB      0x3e,0x38,0x30,0x06
00009c  0e3e0e06          DCB      0x0e,0x3e,0x0e,0x06
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  0000005f          DCB      0x00,0x00,0x00,0x5f
0000a8  00000007          DCB      0x00,0x00,0x00,0x07
0000ac  00070014          DCB      0x00,0x07,0x00,0x14
0000b0  7f147f14          DCB      0x7f,0x14,0x7f,0x14
0000b4  242a7f2a          DCB      0x24,0x2a,0x7f,0x2a
0000b8  12231308          DCB      0x12,0x23,0x13,0x08
0000bc  64623649          DCB      0x64,0x62,0x36,0x49
0000c0  56205000          DCB      0x56,0x20,0x50,0x00
0000c4  08070300          DCB      0x08,0x07,0x03,0x00
0000c8  001c2241          DCB      0x00,0x1c,0x22,0x41
0000cc  00004122          DCB      0x00,0x00,0x41,0x22
0000d0  1c002a1c          DCB      0x1c,0x00,0x2a,0x1c
0000d4  7f1c2a08          DCB      0x7f,0x1c,0x2a,0x08
0000d8  083e0808          DCB      0x08,0x3e,0x08,0x08
0000dc  00807030          DCB      0x00,0x80,0x70,0x30
0000e0  00080808          DCB      0x00,0x08,0x08,0x08
0000e4  08080000          DCB      0x08,0x08,0x00,0x00
0000e8  60600020          DCB      0x60,0x60,0x00,0x20
0000ec  10080402          DCB      0x10,0x08,0x04,0x02
0000f0  3e514945          DCB      0x3e,0x51,0x49,0x45
0000f4  3e00427f          DCB      0x3e,0x00,0x42,0x7f
0000f8  40007249          DCB      0x40,0x00,0x72,0x49
0000fc  49494621          DCB      0x49,0x49,0x46,0x21
000100  41494d33          DCB      0x41,0x49,0x4d,0x33
000104  1814127f          DCB      0x18,0x14,0x12,0x7f
000108  10274545          DCB      0x10,0x27,0x45,0x45
00010c  45393c4a          DCB      0x45,0x39,0x3c,0x4a
000110  49493141          DCB      0x49,0x49,0x31,0x41
000114  21110907          DCB      0x21,0x11,0x09,0x07
000118  36494949          DCB      0x36,0x49,0x49,0x49
00011c  36464949          DCB      0x36,0x46,0x49,0x49
000120  291e0000          DCB      0x29,0x1e,0x00,0x00
000124  14000000          DCB      0x14,0x00,0x00,0x00
000128  40340000          DCB      0x40,0x34,0x00,0x00
00012c  00081422          DCB      0x00,0x08,0x14,0x22
000130  41141414          DCB      0x41,0x14,0x14,0x14
000134  14140041          DCB      0x14,0x14,0x00,0x41
000138  22140802          DCB      0x22,0x14,0x08,0x02
00013c  01590906          DCB      0x01,0x59,0x09,0x06
000140  3e415d59          DCB      0x3e,0x41,0x5d,0x59
000144  4e7c1211          DCB      0x4e,0x7c,0x12,0x11
000148  127c7f49          DCB      0x12,0x7c,0x7f,0x49
00014c  4949363e          DCB      0x49,0x49,0x36,0x3e
000150  41414122          DCB      0x41,0x41,0x41,0x22
000154  7f414141          DCB      0x7f,0x41,0x41,0x41
000158  3e7f4949          DCB      0x3e,0x7f,0x49,0x49
00015c  49417f09          DCB      0x49,0x41,0x7f,0x09
000160  0909013e          DCB      0x09,0x09,0x01,0x3e
000164  41415173          DCB      0x41,0x41,0x51,0x73
000168  7f080808          DCB      0x7f,0x08,0x08,0x08
00016c  7f00417f          DCB      0x7f,0x00,0x41,0x7f
000170  41002040          DCB      0x41,0x00,0x20,0x40
000174  413f017f          DCB      0x41,0x3f,0x01,0x7f
000178  08142241          DCB      0x08,0x14,0x22,0x41
00017c  7f404040          DCB      0x7f,0x40,0x40,0x40
000180  407f021c          DCB      0x40,0x7f,0x02,0x1c
000184  027f7f04          DCB      0x02,0x7f,0x7f,0x04
000188  08107f3e          DCB      0x08,0x10,0x7f,0x3e
00018c  4141413e          DCB      0x41,0x41,0x41,0x3e
000190  7f090909          DCB      0x7f,0x09,0x09,0x09
000194  063e4151          DCB      0x06,0x3e,0x41,0x51
000198  215e7f09          DCB      0x21,0x5e,0x7f,0x09
00019c  19294626          DCB      0x19,0x29,0x46,0x26
0001a0  49494932          DCB      0x49,0x49,0x49,0x32
0001a4  03017f01          DCB      0x03,0x01,0x7f,0x01
0001a8  033f4040          DCB      0x03,0x3f,0x40,0x40
0001ac  403f1f20          DCB      0x40,0x3f,0x1f,0x20
0001b0  40201f3f          DCB      0x40,0x20,0x1f,0x3f
0001b4  4038403f          DCB      0x40,0x38,0x40,0x3f
0001b8  63140814          DCB      0x63,0x14,0x08,0x14
0001bc  63030478          DCB      0x63,0x03,0x04,0x78
0001c0  04036159          DCB      0x04,0x03,0x61,0x59
0001c4  494d4300          DCB      0x49,0x4d,0x43,0x00
0001c8  7f414141          DCB      0x7f,0x41,0x41,0x41
0001cc  02040810          DCB      0x02,0x04,0x08,0x10
0001d0  20004141          DCB      0x20,0x00,0x41,0x41
0001d4  417f0402          DCB      0x41,0x7f,0x04,0x02
0001d8  01020440          DCB      0x01,0x02,0x04,0x40
0001dc  40404040          DCB      0x40,0x40,0x40,0x40
0001e0  00030708          DCB      0x00,0x03,0x07,0x08
0001e4  00205454          DCB      0x00,0x20,0x54,0x54
0001e8  78407f28          DCB      0x78,0x40,0x7f,0x28
0001ec  44443838          DCB      0x44,0x44,0x38,0x38
0001f0  44444428          DCB      0x44,0x44,0x44,0x28
0001f4  38444428          DCB      0x38,0x44,0x44,0x28
0001f8  7f385454          DCB      0x7f,0x38,0x54,0x54
0001fc  54180008          DCB      0x54,0x18,0x00,0x08
000200  7e090218          DCB      0x7e,0x09,0x02,0x18
000204  a4a49c78          DCB      0xa4,0xa4,0x9c,0x78
000208  7f080404          DCB      0x7f,0x08,0x04,0x04
00020c  7800447d          DCB      0x78,0x00,0x44,0x7d
000210  40002040          DCB      0x40,0x00,0x20,0x40
000214  403d007f          DCB      0x40,0x3d,0x00,0x7f
000218  10284400          DCB      0x10,0x28,0x44,0x00
00021c  00417f40          DCB      0x00,0x41,0x7f,0x40
000220  007c0478          DCB      0x00,0x7c,0x04,0x78
000224  04787c08          DCB      0x04,0x78,0x7c,0x08
000228  04047838          DCB      0x04,0x04,0x78,0x38
00022c  44444438          DCB      0x44,0x44,0x44,0x38
000230  fc182424          DCB      0xfc,0x18,0x24,0x24
000234  18182424          DCB      0x18,0x18,0x24,0x24
000238  18fc7c08          DCB      0x18,0xfc,0x7c,0x08
00023c  04040848          DCB      0x04,0x04,0x08,0x48
000240  54545424          DCB      0x54,0x54,0x54,0x24
000244  04043f44          DCB      0x04,0x04,0x3f,0x44
000248  243c4040          DCB      0x24,0x3c,0x40,0x40
00024c  207c1c20          DCB      0x20,0x7c,0x1c,0x20
000250  40201c3c          DCB      0x40,0x20,0x1c,0x3c
000254  4030403c          DCB      0x40,0x30,0x40,0x3c
000258  44281028          DCB      0x44,0x28,0x10,0x28
00025c  444c9090          DCB      0x44,0x4c,0x90,0x90
000260  907c4464          DCB      0x90,0x7c,0x44,0x64
000264  544c4400          DCB      0x54,0x4c,0x44,0x00
000268  08364100          DCB      0x08,0x36,0x41,0x00
00026c  00007700          DCB      0x00,0x00,0x77,0x00
000270  00004136          DCB      0x00,0x00,0x41,0x36
000274  08000201          DCB      0x08,0x00,0x02,0x01
000278  0204023c          DCB      0x02,0x04,0x02,0x3c
00027c  2623263c          DCB      0x26,0x23,0x26,0x3c
000280  1ea1a161          DCB      0x1e,0xa1,0xa1,0x61
000284  123a4040          DCB      0x12,0x3a,0x40,0x40
000288  207a3854          DCB      0x20,0x7a,0x38,0x54
00028c  54555921          DCB      0x54,0x55,0x59,0x21
000290  55557941          DCB      0x55,0x55,0x79,0x41
000294  21545478          DCB      0x21,0x54,0x54,0x78
000298  41215554          DCB      0x41,0x21,0x55,0x54
00029c  78402054          DCB      0x78,0x40,0x20,0x54
0002a0  5579400c          DCB      0x55,0x79,0x40,0x0c
0002a4  1e527212          DCB      0x1e,0x52,0x72,0x12
0002a8  39555555          DCB      0x39,0x55,0x55,0x55
0002ac  59395454          DCB      0x59,0x39,0x54,0x54
0002b0  54593955          DCB      0x54,0x59,0x39,0x55
0002b4  54545800          DCB      0x54,0x54,0x58,0x00
0002b8  00457c41          DCB      0x00,0x45,0x7c,0x41
0002bc  0002457d          DCB      0x00,0x02,0x45,0x7d
0002c0  42000145          DCB      0x42,0x00,0x01,0x45
0002c4  7c40f029          DCB      0x7c,0x40,0xf0,0x29
0002c8  2429f0f0          DCB      0x24,0x29,0xf0,0xf0
0002cc  282528f0          DCB      0x28,0x25,0x28,0xf0
0002d0  7c545545          DCB      0x7c,0x54,0x55,0x45
0002d4  00205454          DCB      0x00,0x20,0x54,0x54
0002d8  7c547c0a          DCB      0x7c,0x54,0x7c,0x0a
0002dc  097f4932          DCB      0x09,0x7f,0x49,0x32
0002e0  49494932          DCB      0x49,0x49,0x49,0x32
0002e4  32484848          DCB      0x32,0x48,0x48,0x48
0002e8  32324a48          DCB      0x32,0x32,0x4a,0x48
0002ec  48303a41          DCB      0x48,0x30,0x3a,0x41
0002f0  41217a3a          DCB      0x41,0x21,0x7a,0x3a
0002f4  42402078          DCB      0x42,0x40,0x20,0x78
0002f8  009da0a0          DCB      0x00,0x9d,0xa0,0xa0
0002fc  7d394444          DCB      0x7d,0x39,0x44,0x44
000300  44393d40          DCB      0x44,0x39,0x3d,0x40
000304  40403d3c          DCB      0x40,0x40,0x3d,0x3c
000308  24ff2424          DCB      0x24,0xff,0x24,0x24
00030c  487e4943          DCB      0x48,0x7e,0x49,0x43
000310  662b2ffc          DCB      0x66,0x2b,0x2f,0xfc
000314  2f2bff09          DCB      0x2f,0x2b,0xff,0x09
000318  29f620c0          DCB      0x29,0xf6,0x20,0xc0
00031c  887e0903          DCB      0x88,0x7e,0x09,0x03
000320  20545479          DCB      0x20,0x54,0x54,0x79
000324  41000044          DCB      0x41,0x00,0x00,0x44
000328  7d413048          DCB      0x7d,0x41,0x30,0x48
00032c  484a3238          DCB      0x48,0x4a,0x32,0x38
000330  4040227a          DCB      0x40,0x40,0x22,0x7a
000334  007a0a0a          DCB      0x00,0x7a,0x0a,0x0a
000338  727d0d19          DCB      0x72,0x7d,0x0d,0x19
00033c  317d2629          DCB      0x31,0x7d,0x26,0x29
000340  292f2826          DCB      0x29,0x2f,0x28,0x26
000344  29292926          DCB      0x29,0x29,0x29,0x26
000348  30484d40          DCB      0x30,0x48,0x4d,0x40
00034c  20380808          DCB      0x20,0x38,0x08,0x08
000350  08080808          DCB      0x08,0x08,0x08,0x08
000354  0808382f          DCB      0x08,0x08,0x38,0x2f
000358  10c8acba          DCB      0x10,0xc8,0xac,0xba
00035c  2f102834          DCB      0x2f,0x10,0x28,0x34
000360  fa00007b          DCB      0xfa,0x00,0x00,0x7b
000364  00000814          DCB      0x00,0x00,0x08,0x14
000368  2a142222          DCB      0x2a,0x14,0x22,0x22
00036c  142a1408          DCB      0x14,0x2a,0x14,0x08
000370  aa005500          DCB      0xaa,0x00,0x55,0x00
000374  aaaa55aa          DCB      0xaa,0xaa,0x55,0xaa
000378  55aa0000          DCB      0x55,0xaa,0x00,0x00
00037c  00ff0010          DCB      0x00,0xff,0x00,0x10
000380  1010ff00          DCB      0x10,0x10,0xff,0x00
000384  141414ff          DCB      0x14,0x14,0x14,0xff
000388  001010ff          DCB      0x00,0x10,0x10,0xff
00038c  00ff1010          DCB      0x00,0xff,0x10,0x10
000390  f010f014          DCB      0xf0,0x10,0xf0,0x14
000394  1414fc00          DCB      0x14,0x14,0xfc,0x00
000398  1414f700          DCB      0x14,0x14,0xf7,0x00
00039c  ff0000ff          DCB      0xff,0x00,0x00,0xff
0003a0  00ff1414          DCB      0x00,0xff,0x14,0x14
0003a4  f404fc14          DCB      0xf4,0x04,0xfc,0x14
0003a8  1417101f          DCB      0x14,0x17,0x10,0x1f
0003ac  10101f10          DCB      0x10,0x10,0x1f,0x10
0003b0  1f141414          DCB      0x1f,0x14,0x14,0x14
0003b4  1f001010          DCB      0x1f,0x00,0x10,0x10
0003b8  10f00000          DCB      0x10,0xf0,0x00,0x00
0003bc  00001f10          DCB      0x00,0x00,0x1f,0x10
0003c0  1010101f          DCB      0x10,0x10,0x10,0x1f
0003c4  10101010          DCB      0x10,0x10,0x10,0x10
0003c8  f0100000          DCB      0xf0,0x10,0x00,0x00
0003cc  00ff1010          DCB      0x00,0xff,0x10,0x10
0003d0  10101010          DCB      0x10,0x10,0x10,0x10
0003d4  101010ff          DCB      0x10,0x10,0x10,0xff
0003d8  10000000          DCB      0x10,0x00,0x00,0x00
0003dc  ff140000          DCB      0xff,0x14,0x00,0x00
0003e0  ff00ff00          DCB      0xff,0x00,0xff,0x00
0003e4  001f1017          DCB      0x00,0x1f,0x10,0x17
0003e8  0000fc04          DCB      0x00,0x00,0xfc,0x04
0003ec  f4141417          DCB      0xf4,0x14,0x14,0x17
0003f0  10171414          DCB      0x10,0x17,0x14,0x14
0003f4  f404f400          DCB      0xf4,0x04,0xf4,0x00
0003f8  00ff00f7          DCB      0x00,0xff,0x00,0xf7
0003fc  14141414          DCB      0x14,0x14,0x14,0x14
000400  141414f7          DCB      0x14,0x14,0x14,0xf7
000404  00f71414          DCB      0x00,0xf7,0x14,0x14
000408  14171410          DCB      0x14,0x17,0x14,0x10
00040c  101f101f          DCB      0x10,0x1f,0x10,0x1f
000410  141414f4          DCB      0x14,0x14,0x14,0xf4
000414  141010f0          DCB      0x14,0x10,0x10,0xf0
000418  10f00000          DCB      0x10,0xf0,0x00,0x00
00041c  1f101f00          DCB      0x1f,0x10,0x1f,0x00
000420  00001f14          DCB      0x00,0x00,0x1f,0x14
000424  000000fc          DCB      0x00,0x00,0x00,0xfc
000428  140000f0          DCB      0x14,0x00,0x00,0xf0
00042c  10f01010          DCB      0x10,0xf0,0x10,0x10
000430  ff10ff14          DCB      0xff,0x10,0xff,0x14
000434  1414ff14          DCB      0x14,0x14,0xff,0x14
000438  1010101f          DCB      0x10,0x10,0x10,0x1f
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  f010ffff          DCB      0xf0,0x10,0xff,0xff
000444  fffffff0          DCB      0xff,0xff,0xff,0xf0
000448  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
00044c  ffffff00          DCB      0xff,0xff,0xff,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  ffff0f0f          DCB      0xff,0xff,0x0f,0x0f
000458  0f0f0f38          DCB      0x0f,0x0f,0x0f,0x38
00045c  44443844          DCB      0x44,0x44,0x38,0x44
000460  7c2a2a3e          DCB      0x7c,0x2a,0x2a,0x3e
000464  147e0202          DCB      0x14,0x7e,0x02,0x02
000468  0606027e          DCB      0x06,0x06,0x02,0x7e
00046c  027e0263          DCB      0x02,0x7e,0x02,0x63
000470  55494163          DCB      0x55,0x49,0x41,0x63
000474  3844443c          DCB      0x38,0x44,0x44,0x3c
000478  04407e20          DCB      0x04,0x40,0x7e,0x20
00047c  1e200602          DCB      0x1e,0x20,0x06,0x02
000480  7e020299          DCB      0x7e,0x02,0x02,0x99
000484  a5e7a599          DCB      0xa5,0xe7,0xa5,0x99
000488  1c2a492a          DCB      0x1c,0x2a,0x49,0x2a
00048c  1c4c7201          DCB      0x1c,0x4c,0x72,0x01
000490  724c304a          DCB      0x72,0x4c,0x30,0x4a
000494  4d4d3030          DCB      0x4d,0x4d,0x30,0x30
000498  48784830          DCB      0x48,0x78,0x48,0x30
00049c  bc625a46          DCB      0xbc,0x62,0x5a,0x46
0004a0  3d3e4949          DCB      0x3d,0x3e,0x49,0x49
0004a4  49007e01          DCB      0x49,0x00,0x7e,0x01
0004a8  01017e2a          DCB      0x01,0x01,0x7e,0x2a
0004ac  2a2a2a2a          DCB      0x2a,0x2a,0x2a,0x2a
0004b0  44445f44          DCB      0x44,0x44,0x5f,0x44
0004b4  4440514a          DCB      0x44,0x40,0x51,0x4a
0004b8  44404044          DCB      0x44,0x40,0x40,0x44
0004bc  4a514000          DCB      0x4a,0x51,0x40,0x00
0004c0  00ff0103          DCB      0x00,0xff,0x01,0x03
0004c4  e080ff00          DCB      0xe0,0x80,0xff,0x00
0004c8  0008086b          DCB      0x00,0x08,0x08,0x6b
0004cc  6b083612          DCB      0x6b,0x08,0x36,0x12
0004d0  36243606          DCB      0x36,0x24,0x36,0x06
0004d4  0f090f06          DCB      0x0f,0x09,0x0f,0x06
0004d8  00001818          DCB      0x00,0x00,0x18,0x18
0004dc  00000010          DCB      0x00,0x00,0x00,0x10
0004e0  10003040          DCB      0x10,0x00,0x30,0x40
0004e4  ff010100          DCB      0xff,0x01,0x01,0x00
0004e8  1f01011e          DCB      0x1f,0x01,0x01,0x1e
0004ec  00191d17          DCB      0x00,0x19,0x1d,0x17
0004f0  12003c3c          DCB      0x12,0x00,0x3c,0x3c
0004f4  3c3c0000          DCB      0x3c,0x3c,0x00,0x00
0004f8  000000            DCB      0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=1

                  cursor_x
000000  0000              DCB      0x00,0x00
                  cursor_y
000002  0000              DCB      0x00,0x00
                  textcolor
000004  0000              DCB      0x00,0x00
                  textbgcolor
000006  0000              DCB      0x00,0x00
                  textsize
000008  00                DCB      0x00
                  wrap
000009  00                DCB      0x00
                  POINT_COLOR
00000a  0000              DCW      0x0000
                  BACK_COLOR
00000c  ffff              DCW      0xffff

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_tft.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_tft_c_4fcc5fa4____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_tft_c_4fcc5fa4____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_tft_c_4fcc5fa4____REVSH|
#line 128
|__asm___9_bsp_tft_c_4fcc5fa4____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
