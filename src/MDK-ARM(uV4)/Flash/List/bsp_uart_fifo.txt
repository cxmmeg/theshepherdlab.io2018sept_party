; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;166    */
;;;167    UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;168    {
;;;169    	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;170    	{
;;;171    		#if UART1_FIFO_EN == 1
;;;172    			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;173    		#else
;;;174    			return 0;
;;;175    		#endif
;;;176    	}
;;;177    	else if (_ucPort == COM2)
;;;178    	{
;;;179    		#if UART2_FIFO_EN == 1
;;;180    			return &g_tUart2;
;;;181    		#else
;;;182    			return;
;;;183    		#endif
;;;184    	}
;;;185    	else if (_ucPort == COM3)
;;;186    	{
;;;187    		#if UART3_FIFO_EN == 1
;;;188    			return &g_tUart3;
;;;189    		#else
;;;190    			return 0;
;;;191    		#endif
;;;192    	}
;;;193    	else if (_ucPort == COM4)
;;;194    	{
;;;195    		#if UART4_FIFO_EN == 1
;;;196    			return &g_tUart4;
;;;197    		#else
;;;198    			return 0;
;;;199    		#endif
;;;200    	}
;;;201    	else if (_ucPort == COM5)
;;;202    	{
;;;203    		#if UART5_FIFO_EN == 1
;;;204    			return &g_tUart5;
;;;205    		#else
;;;206    			return 0;
;;;207    		#endif
;;;208    	}
;;;209    	else
;;;210    	{
;;;211    		/* 不做任何处理 */
;;;212    		return 0;
;;;213    	}
;;;214    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;177
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;185
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;193
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;198
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;201
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;206
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;212
00002a  e7ec              B        |L1.6|
;;;215    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2
                  |L1.52|
                          DCD      g_tUart3

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;847    */
;;;848    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;849    {
;;;850    	NVIC_InitTypeDef NVIC_InitStructure;
;;;851    
;;;852    	/* Configure the NVIC Preemption Priority Bits */
;;;853    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;854    
;;;855    #if UART1_FIFO_EN == 1
;;;856    	/* 使能串口1中断 */
;;;857    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;858    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0002          STRB     r0,[sp,#2]
;;;859    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00000e  2001              MOVS     r0,#1
000010  f88d0003          STRB     r0,[sp,#3]
;;;860    	NVIC_Init(&NVIC_InitStructure);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       NVIC_Init
;;;861    #endif
;;;862    
;;;863    #if UART2_FIFO_EN == 1
;;;864    	/* 使能串口2中断 */
;;;865    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00001a  2026              MOVS     r0,#0x26
00001c  f88d0000          STRB     r0,[sp,#0]
;;;866    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000020  2001              MOVS     r0,#1
000022  f88d0002          STRB     r0,[sp,#2]
;;;867    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000026  f88d0003          STRB     r0,[sp,#3]
;;;868    	NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;869    #endif
;;;870    
;;;871    #if UART3_FIFO_EN == 1
;;;872    	/* 使能串口3中断t */
;;;873    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000030  2027              MOVS     r0,#0x27
000032  f88d0000          STRB     r0,[sp,#0]
;;;874    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
000036  2002              MOVS     r0,#2
000038  f88d0002          STRB     r0,[sp,#2]
;;;875    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d0003          STRB     r0,[sp,#3]
;;;876    	NVIC_Init(&NVIC_InitStructure);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       NVIC_Init
;;;877    #endif
;;;878    
;;;879    #if UART4_FIFO_EN == 1
;;;880    	/* 使能串口4中断t */
;;;881    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;882    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;883    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;884    	NVIC_Init(&NVIC_InitStructure);
;;;885    #endif
;;;886    
;;;887    #if UART5_FIFO_EN == 1
;;;888    	/* 使能串口5中断t */
;;;889    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;890    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;891    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;892    	NVIC_Init(&NVIC_InitStructure);
;;;893    #endif
;;;894    
;;;895    #if UART6_FIFO_EN == 1
;;;896    	/* 使能串口6中断t */
;;;897    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;898    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
;;;899    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;900    	NVIC_Init(&NVIC_InitStructure);
;;;901    #endif
;;;902    }
000048  bd08              POP      {r3,pc}
;;;903    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;607    */
;;;608    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;609    {
000002  b085              SUB      sp,sp,#0x14
;;;610    	GPIO_InitTypeDef GPIO_InitStructure;
;;;611    	USART_InitTypeDef USART_InitStructure;
;;;612    
;;;613    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;614    
;;;615    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;616    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;617    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;618    
;;;619    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;620    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;621    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;622    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;623    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  4866              LDR      r0,|L3.452|
00002c  f7fffffe          BL       GPIO_Init
;;;624    
;;;625    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;626    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;627    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;628    	*/
;;;629    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;630    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;631    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4860              LDR      r0,|L3.452|
000042  f7fffffe          BL       GPIO_Init
;;;632    	
;;;633    	/* 第4步： 配置串口硬件参数 */
;;;634    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f30e1          MOV      r0,#0x1c200
00004a  9000              STR      r0,[sp,#0]
;;;635    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;636    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;637    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;638    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;639    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;640    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  4858              LDR      r0,|L3.456|
000068  f7fffffe          BL       USART_Init
;;;641    
;;;642    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  4855              LDR      r0,|L3.456|
000074  f7fffffe          BL       USART_ITConfig
;;;643    	/*
;;;644    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;645    		注意: 不要在此处打开发送中断
;;;646    		发送中断使能在SendUart()函数打开
;;;647    	*/
;;;648    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  4853              LDR      r0,|L3.456|
00007c  f7fffffe          BL       USART_Cmd
;;;649    
;;;650    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;651    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;652    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4851              LDR      r0,|L3.456|
000084  f7fffffe          BL       USART_ClearFlag
;;;653    #endif
;;;654    
;;;655    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;656    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;657    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;658    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;659    
;;;660    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;661    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000098  2004              MOVS     r0,#4
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;662    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;663    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;664    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  4845              LDR      r0,|L3.452|
0000ae  f7fffffe          BL       GPIO_Init
;;;665    
;;;666    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;667    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;668    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;669    	*/
;;;670    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000b2  2008              MOVS     r0,#8
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;671    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;672    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4840              LDR      r0,|L3.452|
0000c2  f7fffffe          BL       GPIO_Init
;;;673    	/*  第3步已经做了，因此这步可以不做
;;;674    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;675    	*/
;;;676    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  483e              LDR      r0,|L3.452|
0000ca  f7fffffe          BL       GPIO_Init
;;;677    
;;;678    	/* 第4步： 配置串口硬件参数 */
;;;679    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f30e1          MOV      r0,#0x1c200
0000d2  9000              STR      r0,[sp,#0]
;;;680    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;681    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;682    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;683    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000e2  f8ad000c          STRH     r0,[sp,#0xc]
;;;684    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000e6  200c              MOVS     r0,#0xc
0000e8  f8ad000a          STRH     r0,[sp,#0xa]
;;;685    	USART_Init(USART2, &USART_InitStructure);
0000ec  4669              MOV      r1,sp
0000ee  4837              LDR      r0,|L3.460|
0000f0  f7fffffe          BL       USART_Init
;;;686    
;;;687    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f4  2201              MOVS     r2,#1
0000f6  f2405125          MOV      r1,#0x525
0000fa  4834              LDR      r0,|L3.460|
0000fc  f7fffffe          BL       USART_ITConfig
;;;688    	/*
;;;689    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;690    		注意: 不要在此处打开发送中断
;;;691    		发送中断使能在SendUart()函数打开
;;;692    	*/
;;;693    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000100  2101              MOVS     r1,#1
000102  4832              LDR      r0,|L3.460|
000104  f7fffffe          BL       USART_Cmd
;;;694    
;;;695    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;696    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;697    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000108  2140              MOVS     r1,#0x40
00010a  4830              LDR      r0,|L3.460|
00010c  f7fffffe          BL       USART_ClearFlag
;;;698    #endif
;;;699    
;;;700    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;701    
;;;702    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;703    	{
;;;704    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000110  2101              MOVS     r1,#1
000112  2008              MOVS     r0,#8
000114  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;705    
;;;706    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000118  2010              MOVS     r0,#0x10
00011a  f88d0013          STRB     r0,[sp,#0x13]
;;;707    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00011e  2003              MOVS     r0,#3
000120  f88d0012          STRB     r0,[sp,#0x12]
;;;708    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000124  2004              MOVS     r0,#4
000126  f8ad0010          STRH     r0,[sp,#0x10]
;;;709    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00012a  a904              ADD      r1,sp,#0x10
00012c  4828              LDR      r0,|L3.464|
00012e  f7fffffe          BL       GPIO_Init
;;;710    	}
;;;711    
;;;712    	/* 第1步： 开启GPIO和UART时钟 */
;;;713    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
000132  2101              MOVS     r1,#1
000134  2009              MOVS     r0,#9
000136  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;714    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00013a  2101              MOVS     r1,#1
00013c  0488              LSLS     r0,r1,#18
00013e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;715    
;;;716    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;717    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000142  f44f6080          MOV      r0,#0x400
000146  f8ad0010          STRH     r0,[sp,#0x10]
;;;718    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00014a  2018              MOVS     r0,#0x18
00014c  f88d0013          STRB     r0,[sp,#0x13]
;;;719    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000150  2003              MOVS     r0,#3
000152  f88d0012          STRB     r0,[sp,#0x12]
;;;720    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000156  a904              ADD      r1,sp,#0x10
000158  481d              LDR      r0,|L3.464|
00015a  f7fffffe          BL       GPIO_Init
;;;721    
;;;722    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;723    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;724    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;725    	*/
;;;726    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00015e  f44f6000          MOV      r0,#0x800
000162  f8ad0010          STRH     r0,[sp,#0x10]
;;;727    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000166  2004              MOVS     r0,#4
000168  f88d0013          STRB     r0,[sp,#0x13]
;;;728    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00016c  a904              ADD      r1,sp,#0x10
00016e  4818              LDR      r0,|L3.464|
000170  f7fffffe          BL       GPIO_Init
;;;729    	/*  第3步已经做了，因此这步可以不做
;;;730    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;731    	*/
;;;732    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000174  a904              ADD      r1,sp,#0x10
000176  4816              LDR      r0,|L3.464|
000178  f7fffffe          BL       GPIO_Init
;;;733    
;;;734    	/* 第4步： 配置串口硬件参数 */
;;;735    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
00017c  f44f5016          MOV      r0,#0x2580
000180  9000              STR      r0,[sp,#0]
;;;736    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000182  2000              MOVS     r0,#0
000184  f8ad0004          STRH     r0,[sp,#4]
;;;737    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000188  f8ad0006          STRH     r0,[sp,#6]
;;;738    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00018c  f8ad0008          STRH     r0,[sp,#8]
;;;739    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000190  f8ad000c          STRH     r0,[sp,#0xc]
;;;740    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000194  200c              MOVS     r0,#0xc
000196  f8ad000a          STRH     r0,[sp,#0xa]
;;;741    	USART_Init(USART3, &USART_InitStructure);
00019a  4669              MOV      r1,sp
00019c  480d              LDR      r0,|L3.468|
00019e  f7fffffe          BL       USART_Init
;;;742    
;;;743    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001a2  2201              MOVS     r2,#1
0001a4  f2405125          MOV      r1,#0x525
0001a8  480a              LDR      r0,|L3.468|
0001aa  f7fffffe          BL       USART_ITConfig
;;;744    	/*
;;;745    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;746    		注意: 不要在此处打开发送中断
;;;747    		发送中断使能在SendUart()函数打开
;;;748    	*/
;;;749    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001ae  2101              MOVS     r1,#1
0001b0  4808              LDR      r0,|L3.468|
0001b2  f7fffffe          BL       USART_Cmd
;;;750    
;;;751    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;752    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;753    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001b6  2140              MOVS     r1,#0x40
0001b8  4806              LDR      r0,|L3.468|
0001ba  f7fffffe          BL       USART_ClearFlag
;;;754    #endif
;;;755    
;;;756    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;757    	/* 第1步： 开启GPIO和UART时钟 */
;;;758    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;759    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;760    
;;;761    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;762    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;763    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;764    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;765    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;766    
;;;767    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;768    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;769    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;770    	*/
;;;771    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;772    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;773    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;774    
;;;775    	/* 第4步： 配置串口硬件参数 */
;;;776    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;777    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;778    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;779    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;780    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;781    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;782    	USART_Init(UART4, &USART_InitStructure);
;;;783    
;;;784    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;785    	/*
;;;786    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;787    		注意: 不要在此处打开发送中断
;;;788    		发送中断使能在SendUart()函数打开
;;;789    	*/
;;;790    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;791    
;;;792    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;793    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;794    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;795    #endif
;;;796    
;;;797    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;798    	/* 第1步： 开启GPIO和UART时钟 */
;;;799    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;800    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;801    
;;;802    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;803    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;804    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;805    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;806    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;807    
;;;808    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;809    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;810    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;811    	*/
;;;812    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;813    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;814    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;815    
;;;816    
;;;817    	/* 第4步： 配置串口硬件参数 */
;;;818    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;819    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;820    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;821    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;822    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;823    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;824    	USART_Init(UART5, &USART_InitStructure);
;;;825    
;;;826    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;827    	/*
;;;828    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;829    		注意: 不要在此处打开发送中断
;;;830    		发送中断使能在SendUart()函数打开
;;;831    	*/
;;;832    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;833    
;;;834    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;835    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;836    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;837    #endif
;;;838    }
0001be  b005              ADD      sp,sp,#0x14
0001c0  bd00              POP      {pc}
;;;839    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L3.452|
                          DCD      0x40010800
                  |L3.456|
                          DCD      0x40013800
                  |L3.460|
                          DCD      0x40004400
                  |L3.464|
                          DCD      0x40010c00
                  |L3.468|
                          DCD      0x40004800

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;380    */
;;;381    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;382    {
;;;383    	GPIO_InitTypeDef GPIO_InitStructure;
;;;384    
;;;385    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;386    
;;;387    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;388    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;389    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2004              MOVS     r0,#4
000018  f8ad0000          STRH     r0,[sp,#0]
;;;390    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;391    }
000024  bd08              POP      {r3,pc}
;;;392    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;480    extern void MODBUS_ReciveNew(uint8_t _byte);
;;;481    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;482    {
;;;483    	//MODBUS_ReciveNew(_byte);
;;;484    }
;;;485    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;423    */
;;;424    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;425    {
;;;426    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;427    }
000006  4770              BX       lr
;;;428    
                          ENDP

                  |L6.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;451    */
;;;452    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;453    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;454    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;455    }
000010  bd70              POP      {r4-r6,pc}
;;;456    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;437    */
;;;438    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;439    {
;;;440    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;441    }
000006  4770              BX       lr
;;;442    
                          ENDP

                  |L8.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;466    */
;;;467    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;468    {
000002  4604              MOV      r4,r0
;;;469    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;470    }
000014  bd70              POP      {r4-r6,pc}
;;;471    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1115   #if UART1_FIFO_EN == 1
;;;1116   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1117   {
;;;1118   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1119   }
000008  bd10              POP      {r4,pc}
;;;1120   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1122   #if UART2_FIFO_EN == 1
;;;1123   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1124   {
;;;1125   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1126   }
000008  bd10              POP      {r4,pc}
;;;1127   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1129   #if UART3_FIFO_EN == 1
;;;1130   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1131   {
;;;1132   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1133   }
000008  bd10              POP      {r4,pc}
;;;1134   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;983    */
;;;984    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;985    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;986    	uint16_t usCount;
;;;987    
;;;988    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;989    	DISABLE_INT();
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       __set_PRIMASK
;;;990    	usCount = _pUart->usRxCount;
00000c  8b66              LDRH     r6,[r4,#0x1a]
;;;991    	ENABLE_INT();
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;992    
;;;993    	/* 如果读和写索引相同，则返回0 */
;;;994    	//if (_pUart->usRxRead == usRxWrite)
;;;995    	if (usCount == 0)	/* 已经没有数据 */
000014  b90e              CBNZ     r6,|L13.26|
;;;996    	{
;;;997    		return 0;
000016  2000              MOVS     r0,#0
                  |L13.24|
;;;998    	}
;;;999    	else
;;;1000   	{
;;;1001   		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;1002   
;;;1003   		/* 改写FIFO读索引 */
;;;1004   		DISABLE_INT();
;;;1005   		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;1006   		{
;;;1007   			_pUart->usRxRead = 0;
;;;1008   		}
;;;1009   		_pUart->usRxCount--;
;;;1010   		ENABLE_INT();
;;;1011   		return 1;
;;;1012   	}
;;;1013   }
000018  bd70              POP      {r4-r6,pc}
                  |L13.26|
00001a  8b21              LDRH     r1,[r4,#0x18]         ;1001
00001c  68a0              LDR      r0,[r4,#8]            ;1001
00001e  5c40              LDRB     r0,[r0,r1]            ;1001
000020  7028              STRB     r0,[r5,#0]            ;1001
000022  2001              MOVS     r0,#1                 ;1004
000024  f7fffffe          BL       __set_PRIMASK
000028  8b20              LDRH     r0,[r4,#0x18]         ;1005
00002a  1c40              ADDS     r0,r0,#1              ;1005
00002c  b280              UXTH     r0,r0                 ;1005
00002e  8320              STRH     r0,[r4,#0x18]         ;1005
000030  89e1              LDRH     r1,[r4,#0xe]          ;1005
000032  4288              CMP      r0,r1                 ;1005
000034  db01              BLT      |L13.58|
000036  2000              MOVS     r0,#0                 ;1007
000038  8320              STRH     r0,[r4,#0x18]         ;1007
                  |L13.58|
00003a  8b60              LDRH     r0,[r4,#0x1a]         ;1009
00003c  1e40              SUBS     r0,r0,#1              ;1009
00003e  8360              STRH     r0,[r4,#0x1a]         ;1009
000040  2000              MOVS     r0,#0                 ;1010
000042  f7fffffe          BL       __set_PRIMASK
000046  2001              MOVS     r0,#1                 ;1011
000048  e7e6              B        |L13.24|
;;;1014   
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;1022   */
;;;1023   static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;1024   {
000002  4604              MOV      r4,r0
;;;1025   	/* 处理接收中断  */
;;;1026   	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L14.74|
;;;1027   	{
;;;1028   		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;1029   		uint8_t ch;
;;;1030   
;;;1031   		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;1032   		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;1033   		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L14.48|
;;;1034   		{
;;;1035   			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L14.48|
;;;1036   		}
;;;1037   		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L14.62|
;;;1038   		{
;;;1039   			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L14.62|
;;;1040   		}
;;;1041   
;;;1042   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1043   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1044   		//if (_pUart->usRxCount == 1)
;;;1045   		{
;;;1046   			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L14.72|
;;;1047   			{
;;;1048   				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L14.72|
;;;1049   			}
;;;1050   		}
;;;1051   	}
000048  bf00              NOP      
                  |L14.74|
;;;1052   
;;;1053   	/* 处理发送缓冲区空中断 */
;;;1054   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L14.154|
;;;1055   	{
;;;1056   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1057   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L14.116|
;;;1058   		{
;;;1059   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1060   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1061   
;;;1062   			/* 使能数据发送完毕中断 */
;;;1063   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L14.228|
                  |L14.116|
;;;1064   		}
;;;1065   		else
;;;1066   		{
;;;1067   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1068   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1069   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L14.146|
;;;1070   			{
;;;1071   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L14.146|
;;;1072   			}
;;;1073   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L14.228|
                  |L14.154|
;;;1074   		}
;;;1075   
;;;1076   	}
;;;1077   	/* 数据bit位全部发送完毕的中断 */
;;;1078   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L14.228|
;;;1079   	{
;;;1080   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1081   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L14.192|
;;;1082   		{
;;;1083   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1084   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1085   
;;;1086   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1087   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L14.228|
;;;1088   			{
;;;1089   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L14.228|
                  |L14.192|
;;;1090   			}
;;;1091   		}
;;;1092   		else
;;;1093   		{
;;;1094   			/* 正常情况下，不会进入此分支 */
;;;1095   
;;;1096   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1097   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1098   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L14.222|
;;;1099   			{
;;;1100   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L14.222|
;;;1101   			}
;;;1102   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L14.228|
;;;1103   		}
;;;1104   	}
;;;1105   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1106   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;911    */
;;;912    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;913    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;914    	uint16_t i;
;;;915    
;;;916    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e029              B        |L15.96|
                  |L15.12|
;;;917    	{
;;;918    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;919    	#if 0
;;;920    		/*
;;;921    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;922    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;923    			将导致while(1) 无法退出
;;;924    		*/
;;;925    		while (1)
;;;926    		{
;;;927    			uint16_t usRead;
;;;928    
;;;929    			DISABLE_INT();
;;;930    			usRead = _pUart->usTxRead;
;;;931    			ENABLE_INT();
;;;932    
;;;933    			if (++usRead >= _pUart->usTxBufSize)
;;;934    			{
;;;935    				usRead = 0;
;;;936    			}
;;;937    
;;;938    			if (usRead != _pUart->usTxWrite)
;;;939    			{
;;;940    				break;
;;;941    			}
;;;942    		}
;;;943    	#else
;;;944    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;945    		while (1)
00000c  e00e              B        |L15.44|
                  |L15.14|
;;;946    		{
;;;947    			__IO uint16_t usCount;
;;;948    
;;;949    			DISABLE_INT();
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       __set_PRIMASK
;;;950    			usCount = _pUart->usTxCount;
000014  8aa0              LDRH     r0,[r4,#0x14]
000016  9000              STR      r0,[sp,#0]
;;;951    			ENABLE_INT();
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       __set_PRIMASK
;;;952    
;;;953    			if (usCount < _pUart->usTxBufSize)
00001e  89a0              LDRH     r0,[r4,#0xc]
000020  f8bd1000          LDRH     r1,[sp,#0]
000024  4288              CMP      r0,r1
000026  dd00              BLE      |L15.42|
;;;954    			{
;;;955    				break;
000028  e001              B        |L15.46|
                  |L15.42|
;;;956    			}
;;;957    		}
00002a  bf00              NOP      
                  |L15.44|
00002c  e7ef              B        |L15.14|
                  |L15.46|
00002e  bf00              NOP                            ;955
;;;958    	#endif
;;;959    
;;;960    		/* 将新数据填入发送缓冲区 */
;;;961    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
000030  5d70              LDRB     r0,[r6,r5]
000032  8a22              LDRH     r2,[r4,#0x10]
000034  6861              LDR      r1,[r4,#4]
000036  5488              STRB     r0,[r1,r2]
;;;962    
;;;963    		DISABLE_INT();
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       __set_PRIMASK
;;;964    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00003e  8a20              LDRH     r0,[r4,#0x10]
000040  1c40              ADDS     r0,r0,#1
000042  b280              UXTH     r0,r0
000044  8220              STRH     r0,[r4,#0x10]
000046  89a1              LDRH     r1,[r4,#0xc]
000048  4288              CMP      r0,r1
00004a  db01              BLT      |L15.80|
;;;965    		{
;;;966    			_pUart->usTxWrite = 0;
00004c  2000              MOVS     r0,#0
00004e  8220              STRH     r0,[r4,#0x10]
                  |L15.80|
;;;967    		}
;;;968    		_pUart->usTxCount++;
000050  8aa0              LDRH     r0,[r4,#0x14]
000052  1c40              ADDS     r0,r0,#1
000054  82a0              STRH     r0,[r4,#0x14]
;;;969    		ENABLE_INT();
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       __set_PRIMASK
00005c  1c68              ADDS     r0,r5,#1              ;916
00005e  b285              UXTH     r5,r0                 ;916
                  |L15.96|
000060  42bd              CMP      r5,r7                 ;916
000062  dbd3              BLT      |L15.12|
;;;970    	}
;;;971    
;;;972    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
000064  2201              MOVS     r2,#1
000066  f2407127          MOV      r1,#0x727
00006a  6820              LDR      r0,[r4,#0]
00006c  f7fffffe          BL       USART_ITConfig
;;;973    }
000070  bdf8              POP      {r3-r7,pc}
;;;974    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;493    */
;;;494    static void UartVarInit(void)
000000  4821              LDR      r0,|L16.136|
;;;495    {
;;;496    #if UART1_FIFO_EN == 1
;;;497    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  4922              LDR      r1,|L16.140|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;498    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  4822              LDR      r0,|L16.144|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;499    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  4822              LDR      r0,|L16.148|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;500    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;501    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;502    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;503    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;504    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;505    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;506    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;507    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;508    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;509    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;510    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;511    #endif
;;;512    
;;;513    #if UART2_FIFO_EN == 1
;;;514    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  481b              LDR      r0,|L16.152|
00002c  491b              LDR      r1,|L16.156|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;515    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  481b              LDR      r0,|L16.160|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;516    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  481b              LDR      r0,|L16.164|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;517    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  f44f6080          MOV      r0,#0x400
00003c  8188              STRH     r0,[r1,#0xc]
;;;518    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003e  81c8              STRH     r0,[r1,#0xe]
;;;519    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;520    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;521    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;522    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;523    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;524    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;525    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;526    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;527    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;528    #endif
;;;529    
;;;530    #if UART3_FIFO_EN == 1
;;;531    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  4814              LDR      r0,|L16.168|
000056  4915              LDR      r1,|L16.172|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;532    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  4815              LDR      r0,|L16.176|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;533    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  4815              LDR      r0,|L16.180|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;534    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f6080          MOV      r0,#0x400
000066  8188              STRH     r0,[r1,#0xc]
;;;535    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;536    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;537    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;538    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;539    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;540    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;541    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000076  8288              STRH     r0,[r1,#0x14]
;;;542    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
000078  480f              LDR      r0,|L16.184|
00007a  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;543    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
00007c  480f              LDR      r0,|L16.188|
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;544    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000080  480f              LDR      r0,|L16.192|
000082  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;545    #endif
;;;546    
;;;547    #if UART4_FIFO_EN == 1
;;;548    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;549    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;550    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;551    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;552    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;553    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;554    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;555    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;556    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;557    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;558    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;559    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;560    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;561    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;562    #endif
;;;563    
;;;564    #if UART5_FIFO_EN == 1
;;;565    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;566    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;567    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;568    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;569    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;570    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;571    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;572    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;573    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;574    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;575    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;576    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;577    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;578    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;579    #endif
;;;580    
;;;581    
;;;582    #if UART6_FIFO_EN == 1
;;;583    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;584    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;585    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;586    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;587    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;588    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;589    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;590    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;591    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;592    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;593    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;594    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;595    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;596    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;597    #endif
;;;598    }
000084  4770              BX       lr
;;;599    
                          ENDP

000086  0000              DCW      0x0000
                  |L16.136|
                          DCD      0x40013800
                  |L16.140|
                          DCD      g_tUart1
                  |L16.144|
                          DCD      g_TxBuf1
                  |L16.148|
                          DCD      g_RxBuf1
                  |L16.152|
                          DCD      0x40004400
                  |L16.156|
                          DCD      g_tUart2
                  |L16.160|
                          DCD      g_TxBuf2
                  |L16.164|
                          DCD      g_RxBuf2
                  |L16.168|
                          DCD      0x40004800
                  |L16.172|
                          DCD      g_tUart3
                  |L16.176|
                          DCD      g_TxBuf3
                  |L16.180|
                          DCD      g_RxBuf3
                  |L16.184|
                          DCD      RS485_SendBefor
                  |L16.188|
                          DCD      RS485_SendOver
                  |L16.192|
                          DCD      RS485_ReciveNew

                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;179     */
;;;180    __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;181    {
;;;182      register uint32_t __regPriMask         __ASM("primask");
;;;183      __regPriMask = (priMask);
;;;184    }
000004  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;33     //定义_sys_exit()以避免使用半主机模式    
;;;34     void _sys_exit(int x)
000000  bf00              NOP      
;;;35     {
;;;36     	x = x;
;;;37     }
000002  4770              BX       lr
;;;38     
                          ENDP


                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;39     //__use_no_semihosting was requested, but _ttywrch was 
;;;40     void _ttywrch(int ch)
000000  bf00              NOP      
;;;41     {
;;;42     ch = ch;
;;;43     }
000002  4770              BX       lr
;;;44     
                          ENDP


                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;147    */
;;;148    void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150    	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;151    
;;;152    	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;153    
;;;154    	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;155    
;;;156    	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;157    }
000012  bd10              POP      {r4,pc}
;;;158    
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;400    */
;;;401    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;402    {
000002  4604              MOV      r4,r0
;;;403    	USART_InitTypeDef USART_InitStructure;
;;;404    
;;;405    	/* 第2步： 配置串口硬件参数 */
;;;406    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;407    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;408    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;409    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;410    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;411    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;412    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L21.40|
000022  f7fffffe          BL       USART_Init
;;;413    }
000026  bd1f              POP      {r0-r4,pc}
;;;414    
                          ENDP

                  |L21.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;333    */
;;;334    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;335    {
000002  4604              MOV      r4,r0
;;;336    	USART_InitTypeDef USART_InitStructure;
;;;337    
;;;338    	/* 第2步： 配置串口硬件参数 */
;;;339    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;340    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;341    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;342    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;343    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;344    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;345    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L22.40|
000022  f7fffffe          BL       USART_Init
;;;346    }
000026  bd1f              POP      {r0-r4,pc}
;;;347    
                          ENDP

                  |L22.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;355    */
;;;356    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;357    {
000002  4604              MOV      r4,r0
;;;358    	USART_InitTypeDef USART_InitStructure;
;;;359    
;;;360    	/* 第2步： 配置串口硬件参数 */
;;;361    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;362    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;363    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;364    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;365    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;366    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;367    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L23.40|
000022  f7fffffe          BL       USART_Init
;;;368    }
000026  bd1f              POP      {r0-r4,pc}
;;;369    
                          ENDP

                  |L23.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;310    */
;;;311    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;312    {
000002  4603              MOV      r3,r0
;;;313    	UART_T *pUart;
;;;314    
;;;315    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;316    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L24.16|
                  |L24.14|
;;;317    	{
;;;318    		return;
;;;319    	}
;;;320    
;;;321    	pUart->usRxWrite = 0;
;;;322    	pUart->usRxRead = 0;
;;;323    	pUart->usRxCount = 0;
;;;324    }
00000e  bd00              POP      {pc}
                  |L24.16|
000010  2000              MOVS     r0,#0                 ;321
000012  82d0              STRH     r0,[r2,#0x16]         ;321
000014  8310              STRH     r0,[r2,#0x18]         ;322
000016  8350              STRH     r0,[r2,#0x1a]         ;323
000018  bf00              NOP      
00001a  e7f8              B        |L24.14|
;;;325    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;287    */
;;;288    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;289    {
000002  4603              MOV      r3,r0
;;;290    	UART_T *pUart;
;;;291    
;;;292    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;293    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L25.16|
                  |L25.14|
;;;294    	{
;;;295    		return;
;;;296    	}
;;;297    
;;;298    	pUart->usTxWrite = 0;
;;;299    	pUart->usTxRead = 0;
;;;300    	pUart->usTxCount = 0;
;;;301    }
00000e  bd00              POP      {pc}
                  |L25.16|
000010  2000              MOVS     r0,#0                 ;298
000012  8210              STRH     r0,[r2,#0x10]         ;298
000014  8250              STRH     r0,[r2,#0x12]         ;299
000016  8290              STRH     r0,[r2,#0x14]         ;300
000018  bf00              NOP      
00001a  e7f8              B        |L25.14|
;;;302    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;266    */
;;;267    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;269    	UART_T *pUart;
;;;270    
;;;271    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;272    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L26.20|
;;;273    	{
;;;274    		return 0;
000010  2000              MOVS     r0,#0
                  |L26.18|
;;;275    	}
;;;276    
;;;277    	return UartGetChar(pUart, _pByte);
;;;278    }
000012  bd70              POP      {r4-r6,pc}
                  |L26.20|
000014  4631              MOV      r1,r6                 ;277
000016  4620              MOV      r0,r4                 ;277
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L26.18|
;;;279    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;225    */
;;;226    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;227    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;228    	UART_T *pUart;
;;;229    
;;;230    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;231    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L27.24|
                  |L27.20|
;;;232    	{
;;;233    		return;
;;;234    	}
;;;235    
;;;236    	if (pUart->SendBefor != 0)
;;;237    	{
;;;238    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;239    	}
;;;240    
;;;241    	UartSend(pUart, _ucaBuf, _usLen);
;;;242    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L27.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;236
00001a  b108              CBZ      r0,|L27.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;238
00001e  4780              BLX      r0                    ;238
                  |L27.32|
000020  463a              MOV      r2,r7                 ;241
000022  4631              MOV      r1,r6                 ;241
000024  4620              MOV      r0,r4                 ;241
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L27.20|
;;;243    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;252    */
;;;253    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;254    {
000002  4604              MOV      r4,r0
;;;255    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;256    }
00000e  bd1c              POP      {r2-r4,pc}
;;;257    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;81     */
;;;82     int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;83     {
000002  4604              MOV      r4,r0
;;;84     
;;;85     #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;86     	uint8_t ucData;
;;;87     
;;;88     	while (comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L29.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L29.6|
;;;89     
;;;90     	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;91     #else
;;;92     	/* 等待串口1输入数据 */
;;;93     	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;94     
;;;95     	return (int)USART_ReceiveData(USART1);
;;;96     #endif
;;;97     }
000016  bd38              POP      {r3-r5,pc}
;;;98     
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;54     */
;;;55     int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;57     #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;58     	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;59     
;;;60     	return ch;
00000e  4620              MOV      r0,r4
;;;61     #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;62     	/* 写一个字节到USART1 */
;;;63     	USART_SendData(USART1, (uint8_t)ch);
;;;64     
;;;65     	/* 等待发送结束 */
;;;66     	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;67     	{
;;;68     	}
;;;69     
;;;70     	return ch;
;;;71     #endif
;;;72     }
000010  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        1024
                  g_RxBuf2
                          %        1024
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_9275e5e5____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_9275e5e5____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_9275e5e5____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_9275e5e5____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
