; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\image2lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\image2lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\image2lcd.crf ..\..\User\bsp\src\image2lcd.c]
                          THUMB

                          AREA ||i.image_display||, CODE, READONLY, ALIGN=1

                  image_display PROC
;;;59     //注意:针对STM32,不能选择image2lcd的"高位在前(MSB First)"选项,否则imginfo的数据将不正确!!
;;;60     void image_display(u16 x, u16 y, u8 * imgx)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;61     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;62     	HEADCOLOR *imginfo;
;;;63     	u8 ifosize = sizeof(HEADCOLOR);//得到HEADCOLOR结构体的大小
00000a  f04f0808          MOV      r8,#8
;;;64     	imginfo = (HEADCOLOR*)imgx;
00000e  4625              MOV      r5,r4
;;;65     	image_show(x, y, imginfo->w-1, imginfo->h-1, imginfo->scan, imgx + ifosize);
000010  eb040008          ADD      r0,r4,r8
000014  7829              LDRB     r1,[r5,#0]
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  88a8              LDRH     r0,[r5,#4]
00001c  1e40              SUBS     r0,r0,#1
00001e  b283              UXTH     r3,r0
000020  8868              LDRH     r0,[r5,#2]
000022  1e40              SUBS     r0,r0,#1
000024  b282              UXTH     r2,r0
000026  4639              MOV      r1,r7
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       image_show
;;;66     }
00002e  e8bd81fc          POP      {r2-r8,pc}
;;;67     
                          ENDP


                          AREA ||i.image_getcolor||, CODE, READONLY, ALIGN=1

                  image_getcolor PROC
;;;18     //str:数据
;;;19     u16 image_getcolor(u8 mode, u8 *str)
000000  b510              PUSH     {r4,lr}
;;;20     {
000002  4602              MOV      r2,r0
;;;21     	u16 color;
;;;22     	if (mode)
000004  b12a              CBZ      r2,|L2.18|
;;;23     	{
;;;24     		color = ((u16)*str++) << 8;
000006  f8114b01          LDRB     r4,[r1],#1
00000a  0220              LSLS     r0,r4,#8
;;;25     		color |= *str;
00000c  780b              LDRB     r3,[r1,#0]
00000e  4318              ORRS     r0,r0,r3
000010  e004              B        |L2.28|
                  |L2.18|
;;;26     	}
;;;27     	else
;;;28     	{
;;;29     		color = *str++;
000012  f8110b01          LDRB     r0,[r1],#1
;;;30     		color |= ((u16)*str) << 8;
000016  780b              LDRB     r3,[r1,#0]
000018  ea402003          ORR      r0,r0,r3,LSL #8
                  |L2.28|
;;;31     	}
;;;32     	return color;
;;;33     }
00001c  bd10              POP      {r4,pc}
;;;34     //在液晶上画图（仅支持：从左到右，从上到下 or 从上到下，从左到右 的扫描方式！）	   
                          ENDP


                          AREA ||i.image_show||, CODE, READONLY, ALIGN=1

                  image_show PROC
;;;37     //*p:图像数据
;;;38     void image_show(u16 xsta, u16 ysta, u16 xend, u16 yend, u8 scan, u8 *p)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;39     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dda80a          LDRD     r10,r8,[sp,#0x28]
;;;40     	u32 i;
;;;41     	u32 len = 0;
000010  f04f0b00          MOV      r11,#0
;;;42     	lcd_set_window(xsta, ysta, xend, yend);
000014  463b              MOV      r3,r7
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       lcd_set_window
;;;43     	lcd_cursor(xsta, ysta); 
000020  4629              MOV      r1,r5
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       lcd_cursor
;;;44     	len = (xend - xsta + 1)*(yend - ysta + 1);			//写入的数据长度
000028  1b30              SUBS     r0,r6,r4
00002a  1c40              ADDS     r0,r0,#1
00002c  1b79              SUBS     r1,r7,r5
00002e  1c49              ADDS     r1,r1,#1
000030  fb00fb01          MUL      r11,r0,r1
;;;45     	for (i = 0; i < len; i++)
000034  f04f0900          MOV      r9,#0
000038  e00b              B        |L3.82|
                  |L3.58|
;;;46     	{
;;;47     		LCD_WR_16Bit(image_getcolor(scan&(1 << 4), p));
00003a  f00a0010          AND      r0,r10,#0x10
00003e  4641              MOV      r1,r8
000040  f7fffffe          BL       image_getcolor
000044  9000              STR      r0,[sp,#0]
000046  f7fffffe          BL       LCD_WR_16Bit
;;;48     		p += 2;
00004a  f1080802          ADD      r8,r8,#2
00004e  f1090901          ADD      r9,r9,#1              ;45
                  |L3.82|
000052  45d9              CMP      r9,r11                ;45
000054  d3f1              BCC      |L3.58|
;;;49     	}
;;;50     }
000056  e8bd8ff8          POP      {r3-r11,pc}
;;;51     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\image2lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_image2lcd_c_d9b56b02____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_image2lcd_c_d9b56b02____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_image2lcd_c_d9b56b02____REVSH|
#line 128
|__asm___11_image2lcd_c_d9b56b02____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
