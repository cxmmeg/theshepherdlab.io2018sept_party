; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\app\src\main.cpp]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;29     
;;;30     int main(void)
000000  f7fffffe          BL       bsp_Init
;;;31     {
;;;32     	//uint8_t ucKeyCode;	
;;;33     	//uint16_t i,j;
;;;34     
;;;35     	/*
;;;36     		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;37     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;38     	*/
;;;39     	
;;;40     	bsp_Init();		/* 硬件初始化 */
;;;41     	shephardlabparty_start();
000004  f7fffffe          BL       shephardlabparty_start
;;;42     	
;;;43     	LCD_Clear(BLACK);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LCD_Clear
;;;44     	Init_SNAKE();
00000e  f7fffffe          BL       Init_SNAKE
;;;45     	Init_GUESSNUM();
000012  f7fffffe          BL       Init_GUESSNUM
;;;46     	
;;;47     	bsp_StartAutoTimer(0, 500);	/* 启动1个1000ms的自动重装的定时器 */
000016  f44f71fa          MOV      r1,#0x1f4
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       bsp_StartAutoTimer
;;;48     
;;;49     //******************************* Menu *********************************//
;;;50     
;;;51     	/* 主程序大循环 */
;;;52     	while (1)
000020  e04f              B        |L1.194|
                  |L1.34|
;;;53     	{
;;;54     		bsp_Idle();		/* CPU空闲时执行的函数，在 bsp.c */
000022  f7fffffe          BL       bsp_Idle
;;;55     		//Menu_Loop();
;;;56     		
;;;57     		//if (bsp_CheckTimer(0))	/* 判断定时器超时时间 */
;;;58     		//{
;;;59     		//	//printf("time ok\r\n");
;;;60     		//	//Menu_UpdateFrame();
;;;61     
;;;62     		//	//uint16_t adc;
;;;63     
;;;64     		//	//adc = bsp_GetAdc_Average(1);
;;;65     
;;;66     		//	///* 注意： 末尾只有 \r回车, 没有\n换行，可以使PC超级终端界面稳定在1行显示 */
;;;67     		//	//{
;;;68     		//	//	/* 超级终端界面上会显示一个不断旋转的字符
;;;69     		//	//	增加这个功能，是为了避免程序死机的假象，因为ADC采样值很稳定
;;;70     		//	//	*/
;;;71     		//	//	static uint8_t pos = 0;
;;;72     
;;;73     		//	//	if (pos == 0)
;;;74     		//	//		printf("|");
;;;75     		//	//	else if (pos == 1)
;;;76     		//	//		printf("/");
;;;77     		//	//	else if (pos == 2)
;;;78     		//	//		printf("-");
;;;79     		//	//	else if (pos == 3)
;;;80     		//	//		printf("\\");		/* 注意：这个特殊字符需要转义 */
;;;81     
;;;82     		//	//	if (++pos >= 4)
;;;83     		//	//	{
;;;84     		//	//		pos = 0;
;;;85     		//	//	}
;;;86     
;;;87     		//	//	printf(" PC4口线ADC采样值 = %5d , 电压 = %4dmV\r",
;;;88     		//	//		adc, ((uint32_t)adc * 2500) / 4095);
;;;89     		//	//}
;;;90     		//}
;;;91     
;;;92     		//Key_Value = bsp_GetKey();
;;;93     		//if (Key_Value > 0)
;;;94     		//{
;;;95     		//	if (Key_Value == KEY_DOWN_U)
;;;96     		//	{
;;;97     		//		flag = 1;
;;;98     		//		LCD_Clear(BLACK);
;;;99     		//		Init_SNAKE();
;;;100    		//		break;
;;;101    		//	}
;;;102    		//	else if (Key_Value == KEY_DOWN_D)
;;;103    		//	{
;;;104    		//		flag = 2;
;;;105    		//		break;
;;;106    		//	}
;;;107    		//}
;;;108    		//if (flag == 1)
;;;109    		//{
;;;110    		//	Run_SNAKE();
;;;111    		//}
;;;112    
;;;113    		//Run_SNAKE();
;;;114    		//RUN_GUESS();
;;;115    		if (game_sel == 0)
000026  4827              LDR      r0,|L1.196|
000028  7800              LDRB     r0,[r0,#0]  ; game_sel
00002a  b9a8              CBNZ     r0,|L1.88|
;;;116    		{
;;;117    			LCD_Clear(BLACK);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       LCD_Clear
;;;118    			LCD_setTextColor(WHITE, BLACK);
000032  2100              MOVS     r1,#0
000034  f64f70ff          MOV      r0,#0xffff
000038  f7fffffe          BL       LCD_setTextColor
;;;119    			LCD_text("Press Up, Play Snake!", 16, 32);
00003c  2220              MOVS     r2,#0x20
00003e  2110              MOVS     r1,#0x10
000040  a021              ADR      r0,|L1.200|
000042  f7fffffe          BL       LCD_text
;;;120    			LCD_text("Press Down, Play GuessNum!", 2, 72);
000046  2248              MOVS     r2,#0x48
000048  2102              MOVS     r1,#2
00004a  a025              ADR      r0,|L1.224|
00004c  f7fffffe          BL       LCD_text
;;;121    			game_sel = 1;
000050  2001              MOVS     r0,#1
000052  491c              LDR      r1,|L1.196|
000054  7008              STRB     r0,[r1,#0]
000056  e034              B        |L1.194|
                  |L1.88|
;;;122    		}
;;;123    		else if (game_sel == 1)
000058  481a              LDR      r0,|L1.196|
00005a  7800              LDRB     r0,[r0,#0]  ; game_sel
00005c  2801              CMP      r0,#1
00005e  d123              BNE      |L1.168|
;;;124    		{
;;;125    			Key_Value = bsp_GetKey();
000060  f7fffffe          BL       bsp_GetKey
000064  4925              LDR      r1,|L1.252|
000066  7008              STRB     r0,[r1,#0]
;;;126    			if (Key_Value > 0)
000068  4608              MOV      r0,r1
00006a  7800              LDRB     r0,[r0,#0]  ; Key_Value
00006c  2800              CMP      r0,#0
00006e  dd28              BLE      |L1.194|
;;;127    			{
;;;128    				if (Key_Value == KEY_DOWN_D)
000070  4608              MOV      r0,r1
000072  7800              LDRB     r0,[r0,#0]  ; Key_Value
000074  2810              CMP      r0,#0x10
000076  d109              BNE      |L1.140|
;;;129    				{
;;;130    					LCD_Clear(BLACK);
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       LCD_Clear
;;;131    					game_sel = 3;
00007e  2003              MOVS     r0,#3
000080  4910              LDR      r1,|L1.196|
000082  7008              STRB     r0,[r1,#0]
;;;132    					Key_Value = 0;
000084  2000              MOVS     r0,#0
000086  491d              LDR      r1,|L1.252|
000088  7008              STRB     r0,[r1,#0]
00008a  e01a              B        |L1.194|
                  |L1.140|
;;;133    				}
;;;134    				else if (Key_Value == KEY_DOWN_U)
00008c  481b              LDR      r0,|L1.252|
00008e  7800              LDRB     r0,[r0,#0]  ; Key_Value
000090  280d              CMP      r0,#0xd
000092  d116              BNE      |L1.194|
;;;135    				{
;;;136    					LCD_Clear(BLACK);
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       LCD_Clear
;;;137    					game_sel = 2;
00009a  2002              MOVS     r0,#2
00009c  4909              LDR      r1,|L1.196|
00009e  7008              STRB     r0,[r1,#0]
;;;138    					Key_Value = 0;
0000a0  2000              MOVS     r0,#0
0000a2  4916              LDR      r1,|L1.252|
0000a4  7008              STRB     r0,[r1,#0]
0000a6  e00c              B        |L1.194|
                  |L1.168|
;;;139    				}
;;;140    			}
;;;141    		}
;;;142    		else if(game_sel == 2)
0000a8  4806              LDR      r0,|L1.196|
0000aa  7800              LDRB     r0,[r0,#0]  ; game_sel
0000ac  2802              CMP      r0,#2
0000ae  d102              BNE      |L1.182|
;;;143    		{
;;;144    			RUN_SNK();
0000b0  f7fffffe          BL       RUN_SNK
0000b4  e005              B        |L1.194|
                  |L1.182|
;;;145    		}
;;;146    		else if (game_sel == 3)
0000b6  4803              LDR      r0,|L1.196|
0000b8  7800              LDRB     r0,[r0,#0]  ; game_sel
0000ba  2803              CMP      r0,#3
0000bc  d101              BNE      |L1.194|
;;;147    		{
;;;148    			RUN_GUESS();
0000be  f7fffffe          BL       RUN_GUESS
                  |L1.194|
0000c2  e7ae              B        |L1.34|
;;;149    		}
;;;150    		
;;;151    
;;;152    		//bsp_DelayMS(100);
;;;153    		/* 处理按键事件 */
;;;154    		//ucKeyCode = bsp_GetKey();
;;;155    		//if (ucKeyCode > 0)
;;;156    		//{
;;;157    		//	/* 有键按下 */
;;;158    		//	switch (ucKeyCode)
;;;159    		//	{
;;;160    		//		case KEY_DOWN_L:		/* 摇杆LEFT键按下, 控制LED显示流动 */
;;;161    		//			printf("KEY_L\n");
;;;162    		//			break;		
;;;163    		//		
;;;164    		//		case KEY_DOWN_R:		/* 摇杆RIGHT键按下 */
;;;165    		//			printf("KEY_R\n");
;;;166    		//			break;
;;;167    
;;;168    		//		case KEY_DOWN_U:		/* 摇杆UP键按下 */
;;;169    		//			printf("KEY_U\n");
;;;170    		//			break;				
;;;171    		//		
;;;172    		//		case KEY_DOWN_D:		/* 摇杆DOWN键按下 */
;;;173    		//			printf("KEY_D\n");
;;;174    		//			break;	
;;;175    		//		
;;;176    		//		case KEY_DOWN_A:		/* 摇杆LEFT键按下, 控制LED显示流动 */
;;;177    		//			printf("KEY_A\n");
;;;178    		//			break;		
;;;179    		//		
;;;180    		//		case KEY_DOWN_B:		/* 摇杆RIGHT键按下 */
;;;181    		//			printf("KEY_B\n");
;;;182    		//			break;
;;;183    
;;;184    		//		case KEY_DOWN_X:		/* 摇杆UP键按下 */
;;;185    		//			printf("KEY_X\n");
;;;186    		//			break;				
;;;187    		//		
;;;188    		//		case KEY_DOWN_Y:		/* 摇杆DOWN键按下 */
;;;189    		//			printf("KEY_Y\n");
;;;190    		//			break;	
;;;191    		//		
;;;192    		//		default:
;;;193    		//			break;
;;;194    		//	}
;;;195    		//}
;;;196    	}
;;;197    }
;;;198    
                          ENDP

                  |L1.196|
                          DCD      game_sel
                  |L1.200|
0000c8  50726573          DCB      "Press Up, Play Snake!",0
0000cc  73205570
0000d0  2c20506c
0000d4  61792053
0000d8  6e616b65
0000dc  2100    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L1.224|
0000e0  50726573          DCB      "Press Down, Play GuessNum!",0
0000e4  7320446f
0000e8  776e2c20
0000ec  506c6179
0000f0  20477565
0000f4  73734e75
0000f8  6d2100  
0000fb  00                DCB      0
                  |L1.252|
                          DCD      Key_Value

                          AREA ||.ARM.exidx||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  game_sel
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_game_sel___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_main_cpp_game_sel___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_game_sel___Z7__REVSHi|
#line 128
|__asm___8_main_cpp_game_sel___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
